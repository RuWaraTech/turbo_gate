name: CI - Turbo Gate
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ "**" ]

env:
  IMAGE_NAME: fwande/turbogate
  REGISTRY_CACHE_NAME: fwande/turbogate-cache
  POETRY_VERSION: 1.8.3

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: üß± Checkout Code
      uses: actions/checkout@v4
    
    - name: üîç Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: üì§ Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    outputs:
      duration: ${{ steps.duration.outputs.duration }}
      status: ${{ job.status }}

    steps:
    - name: üïí Start Timer
      id: timer
      run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

    - name: üß± Checkout Code
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0
          network=host

    - name: üîß Build Test Image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: test
        load: true
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          POETRY_VERSION=1.8.3

    - name: üß™ Run Tests with Coverage
      run: |
        # Run tests and capture exit code
        docker run --rm ${{ env.IMAGE_NAME }}:test 
          
        
    - name: üîß Build Production Image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: prod
        load: true
        tags: ${{ env.IMAGE_NAME }}:prod
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          POETRY_VERSION=1.8.3

    - name: üèÉ Run Production Container and Health Check
      run: |
        # Start container with resource limits
        docker run --rm -d \
          -p 5000:5000 \
          --name turbogate_prod \
          --memory="512m" \
          --cpus="1" \
          -e PYTHONUNBUFFERED=1 \
          ${{ env.IMAGE_NAME }}:prod
        
        # Wait for health check to pass (Dockerfile already has HEALTHCHECK)
        echo "‚è≥ Waiting for container to be healthy..."
        timeout 60s bash -c '
          until [ "$(docker inspect -f {{.State.Health.Status}} turbogate_prod)" == "healthy" ]; do
            echo "Container health: $(docker inspect -f {{.State.Health.Status}} turbogate_prod)"
            sleep 2
          done
        '
        
        # Additional verification with more detailed output
        echo "‚úÖ Container is healthy, performing additional checks..."
        curl -v --retry 3 --retry-delay 2 --fail http://localhost:5000/gateway/health
        
        # Check container logs for any startup errors
        echo "üìã Container logs:"
        docker logs turbogate_prod --tail 20

    - name: üõë Stop Production Container
      if: always()
      run: docker stop turbogate_prod || true

    - name: ‚è±Ô∏è Calculate duration
      id: duration
      if: always()
      run: |
        end_time=$(date +%s)
        duration=$((end_time - ${{ steps.timer.outputs.start_time }}))
        echo "duration=${duration}" >> $GITHUB_OUTPUT

  discord-notify:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: üìù Prepare notification data
        id: prepare
        run: |
          # Extract commit info
          COMMIT_MSG="${{ github.event.head_commit.message || github.event.pull_request.title }}"
          FIRST_LINE=$(echo "$COMMIT_MSG" | head -n 1 | sed 's/"/\\"/g')
          echo "first_line=${FIRST_LINE}" >> $GITHUB_OUTPUT
          
          # Format PR/Push info
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "pr_text=PR #${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          else
            echo "pr_text=Push" >> $GITHUB_OUTPUT
            echo "author=${{ github.actor }}" >> $GITHUB_OUTPUT
          fi
          
          # Determine overall status
          BUILD_RESULT="${{ needs.build.result }}"
          SECURITY_RESULT="${{ needs.security-scan.result }}"
          
          if [ "$BUILD_RESULT" == "success" ] && [ "$SECURITY_RESULT" == "success" ]; then
            echo "status_emoji=‚úÖ" >> $GITHUB_OUTPUT
            echo "status_text=Success" >> $GITHUB_OUTPUT
            echo "color=65280" >> $GITHUB_OUTPUT
          elif [ "$BUILD_RESULT" == "failure" ] || [ "$SECURITY_RESULT" == "failure" ]; then
            echo "status_emoji=‚ùå" >> $GITHUB_OUTPUT
            echo "status_text=Failure" >> $GITHUB_OUTPUT
            echo "color=16711680" >> $GITHUB_OUTPUT
          elif [ "$BUILD_RESULT" == "cancelled" ] || [ "$SECURITY_RESULT" == "cancelled" ]; then
            echo "status_emoji=‚ö†Ô∏è" >> $GITHUB_OUTPUT
            echo "status_text=Cancelled" >> $GITHUB_OUTPUT
            echo "color=16776960" >> $GITHUB_OUTPUT
          else
            echo "status_emoji=‚ùì" >> $GITHUB_OUTPUT
            echo "status_text=Unknown" >> $GITHUB_OUTPUT
            echo "color=8421504" >> $GITHUB_OUTPUT
          fi
          
          # Individual job statuses
          echo "build_status=$BUILD_RESULT" >> $GITHUB_OUTPUT
          echo "security_status=$SECURITY_RESULT" >> $GITHUB_OUTPUT

      - name: üì¢ Send Discord Notification
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          # Validate webhook URL exists
          if [ -z "$WEBHOOK_URL" ]; then
            echo "‚ö†Ô∏è Discord webhook not configured, skipping notification"
            exit 0
          fi
          
          # Send notification
          curl -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "TurboGate CI ${{ steps.prepare.outputs.status_text }}",
                "description": "**Status**: ${{ steps.prepare.outputs.status_emoji }} ${{ steps.prepare.outputs.status_text }}\n**Repository**: `${{ github.repository }}`\n**Branch**: `${{ github.ref_name }}`\n**Author**: @${{ steps.prepare.outputs.author }}\n**Trigger**: ${{ steps.prepare.outputs.pr_text }}\n**Commit**: [`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n**Message**: ${{ steps.prepare.outputs.first_line }}\n**Workflow**: [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n**Duration**: ${{ needs.build.outputs.duration }}s",
                "color": ${{ steps.prepare.outputs.color }},
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "footer": {
                  "text": "GitHub Actions ‚Ä¢ ubuntu-latest",
                  "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                },
                "fields": [
                  {
                    "name": "Build Status",
                    "value": "${{ steps.prepare.outputs.build_status }}",
                    "inline": true
                  },
                  {
                    "name": "Security Scan",
                    "value": "${{ steps.prepare.outputs.security_status }}",
                    "inline": true
                  },
                  {
                    "name": "Run Number",
                    "value": "#${{ github.run_number }}",
                    "inline": true
                  }
                ]
              }],
              "username": "GitHub CI Bot",
              "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
            }' \
            "$WEBHOOK_URL"