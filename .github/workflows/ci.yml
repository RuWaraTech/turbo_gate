name: CI - Turbo Gate
on:
  push:
    branches: ["**"] 
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: fwande/turbogate

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      duration: ${{ steps.duration.outputs.duration }}

    steps:
    - name: üïí Start timer
      id: timer
      uses: actions/github-script@v6
      with:
        script: |
          core.setOutput('start_time', new Date().getTime())

    - name: üß± Checkout Code
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: üì¶ Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: üîß Build Docker Image with Test Target
      run: |
        docker build \
        --target test \
        -t $IMAGE_NAME:test \
        .

    - name: üß™ Run Tests
      run: |
        docker run --rm $IMAGE_NAME:test

    - name: üîß Build Docker Image with Prod Target
      run: |
        docker build \
        --target prod \
        -t $IMAGE_NAME:prod \
        .

    - name: Run Production Container in Background
      run: |
        docker run --rm -d -p 5000:5000 --name turbogate_prod $IMAGE_NAME:prod

    - name: Health Check on Prod Container
      run: |
        sleep 30
        curl --retry 3 --retry-delay 5 --fail http://localhost:5000/gateway/health

    - name: Stop Prod Container
      if: always()
      run: |
        docker stop turbogate_prod || true

    - name: Calculate duration
      id: duration
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const start = ${{ steps.timer.outputs.start_time }}
          const end = new Date().getTime()
          const duration = ((end - start) / 1000).toFixed(2)
          core.setOutput('duration', duration)

  discord-notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Extract commit info
        id: commit-info
        run: |
          # Fallback for commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          COMMIT_MSG="${COMMIT_MSG:-No commit message}"
          FIRST_LINE=$(echo "$COMMIT_MSG" | head -n 1 | sed 's/"/\\"/g')
          echo "first_line=${FIRST_LINE}" >> $GITHUB_OUTPUT
          
          # Detect event type
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "pr_text=PR #${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          else
            echo "pr_text=Push" >> $GITHUB_OUTPUT
            echo "author=${{ github.actor }}" >> $GITHUB_OUTPUT
          fi

      - name: Validate and send Discord notification
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          # Validate webhook
          if [ -z "$WEBHOOK_URL" ]; then
            echo "‚ö†Ô∏è Discord webhook not configured"
            exit 0
          fi

          # Set build status
          if [ "${{ needs.build.result }}" == "success" ]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="Success"
            COLOR="65280" # Green
          else
            STATUS_EMOJI="‚ùå"
            STATUS_TEXT="Failure"
            COLOR="16711680" # Red
          fi

          # Build JSON payload using jq
          PAYLOAD=$(jq -n \
            --arg title "TurboGate CI $STATUS_TEXT" \
            --arg status "$STATUS_EMOJI $STATUS_TEXT" \
            --arg repo "${{ github.repository }}" \
            --arg branch "${{ github.ref_name || github.ref }}" \
            --arg author "@${{ steps.commit-info.outputs.author }}" \
            --arg trigger "${{ steps.commit-info.outputs.pr_text }}" \
            --arg commit "[${GITHUB_SHA:0:7}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" \
            --arg message "${{ steps.commit-info.outputs.first_line }}" \
            --arg workflow "[${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" \
            --arg duration "${{ needs.build.outputs.duration || 'N/A' }} seconds" \
            --arg username "${{ github.actor }}" \
            --arg avatar_url "https://github.com/${{ github.actor }}.png" \
            --argjson color "$COLOR" \
            '{
              embeds: [{
                title: $title,
                description: (
                  "**Status**: \($status)\n" +
                  "**Repository**: `\($repo)`\n" +
                  "**Branch**: `\($branch)`\n" +
                  "**Author**: \($author)\n" +
                  "**Trigger**: \($trigger)\n" +
                  "**Commit**: \($commit)\n" +
                  "**Message**: \($message)\n" +
                  "**Workflow**: \($workflow)\n" +
                  "**Duration**: \($duration)\n" +
                  "**Runner**: ubuntu-latest"
                ),
                color: $color,
                timestamp: now|strftime("%Y-%m-%dT%H:%M:%SZ"),
                footer: {
                  text: "GitHub Actions",
                  icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                }
              }],
              username: $username,
              avatar_url: $avatar_url
            }')

          # Send to Discord
          curl -sS -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$WEBHOOK_URL" || echo "‚ö†Ô∏è Failed to send Discord notification"
