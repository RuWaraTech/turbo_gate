name: CI - Turbo Gate
on:
  push:
    branches: ["main"]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: fwande/turbogate

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      duration: ${{ steps.duration.outputs.duration }}

    steps:
      - name: üïí Start timer
        id: timer
        uses: actions/github-script@v6
        with:
          script: |
            core.setOutput('start_time', new Date().getTime())

      - name: üß± Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full commit history for better message extraction

      # ... [rest of your build steps remain the same] ...

  discord_notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Extract commit info
        id: commit-info
        run: |
          # Enhanced commit message extraction
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, use PR title + last commit message
            PR_TITLE="${{ github.event.pull_request.title }}"
            LAST_COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1)
            COMMIT_MSG="$PR_TITLE (Last commit: $LAST_COMMIT_MSG)"
            echo "pr_text=PR #${{ github.event.pull_request.number }}: $PR_TITLE" >> $GITHUB_OUTPUT
            echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          else
            # For pushes, use the actual commit message
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            if [ -z "$COMMIT_MSG" ]; then
              # Fallback to git log if head_commit.message is empty
              COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1)
            fi
            echo "pr_text=Push to ${{ github.ref_name || github.ref }}" >> $GITHUB_OUTPUT
            echo "author=${{ github.actor }}" >> $GITHUB_OUTPUT
          fi

          # Clean and format the message
          COMMIT_MSG="${COMMIT_MSG:-[No commit message provided]}"
          FIRST_LINE=$(echo "$COMMIT_MSG" | head -n 1 | sed -e 's/"/\\"/g' -e 's/\r//g' -e 's/\n/ /g')
          
          echo "first_line=${FIRST_LINE}" >> $GITHUB_OUTPUT
          echo "full_message=${COMMIT_MSG}" >> $GITHUB_OUTPUT

      - name: Debug commit info
        if: github.event_name != 'pull_request'
        run: |
          echo "HEAD_COMMIT: ${{ toJson(github.event.head_commit) }}"
          echo "Extracted message: ${{ steps.commit-info.outputs.full_message }}"

      - name: Validate and send Discord notification
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          # Validate webhook
          if [ -z "$WEBHOOK_URL" ]; then
            echo "‚ö†Ô∏è Discord webhook not configured"
            exit 0
          fi

          # Enhanced status detection
          if [ "${{ needs.build.result }}" == "success" ]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="Success"
            COLOR="65280" # Green
          else
            STATUS_EMOJI="‚ùå"
            STATUS_TEXT="Failure"
            COLOR="16711680" # Red
          fi

          # Enhanced message with commit details
          COMMIT_DETAILS=""
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            COMMIT_DETAILS="**PR Title**: ${{ steps.commit-info.outputs.first_line }}"
          else
            COMMIT_DETAILS="**Commit Message**: ${{ steps.commit-info.outputs.first_line }}"
          fi

          # Build JSON payload using jq
          PAYLOAD=$(jq -n \
            --arg title "TurboGate CI $STATUS_TEXT" \
            --arg status "$STATUS_EMOJI $STATUS_TEXT" \
            --arg repo "${{ github.repository }}" \
            --arg branch "${{ github.ref_name || github.ref }}" \
            --arg author "@${{ steps.commit-info.outputs.author }}" \
            --arg trigger "${{ steps.commit-info.outputs.pr_text }}" \
            --arg commit "[${GITHUB_SHA:0:7}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" \
            --arg message "${{ steps.commit-info.outputs.full_message }}" \
            --arg workflow "[${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" \
            --arg duration "${{ needs.build.outputs.duration || 'N/A' }} seconds" \
            --arg username "${{ github.actor }}" \
            --arg avatar_url "https://github.com/${{ github.actor }}.png" \
            --argjson color "$COLOR" \
            '{
              embeds: [{
                title: $title,
                description: (
                  "**Status**: \($status)\n" +
                  "**Repository**: `\($repo)`\n" +
                  "**Branch**: `\($branch)`\n" +
                  "**Author**: \($author)\n" +
                  "**Trigger**: \($trigger)\n" +
                  "**Commit**: \($commit)\n" +
                  "\($message)\n" +
                  "**Workflow**: \($workflow)\n" +
                  "**Duration**: \($duration)\n" +
                  "**Runner**: ubuntu-latest"
                ),
                color: $color,
                timestamp: now|strftime("%Y-%m-%dT%H:%M:%SZ"),
                footer: {
                  text: "GitHub Actions",
                  icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                }
              }],
              username: $username,
              avatar_url: $avatar_url
            }')

          # Send to Discord with error handling
          curl -sS -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$WEBHOOK_URL" || echo "‚ö†Ô∏è Failed to send Discord notification"