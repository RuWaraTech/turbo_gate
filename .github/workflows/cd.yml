name: Deploy to Production

on:
  workflow_run:
    workflows: ["Bump Version and Create Release"]  # Changed from "CI - Turbo Gate"
    types:
      - completed
    branches: [main]
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'

env:
  IMAGE_NAME: fwande/turbogate
  DEPLOYMENT_TIMEOUT: 300

jobs:
  pre-deploy-check:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      image_tag: ${{ steps.tag.outputs.image_tag }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    
    steps:
      - name: 🔍 Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Manual deployment triggered"
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Version bump completed, proceeding with deployment"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "❌ Version bump failed, skipping deployment"
          fi
      
      - name: 🧱 Checkout Code (for version detection)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🏷️ Get latest version tag
        id: version
        run: |
          # Get the latest tag (should be the one just created by the bump workflow)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "version_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest version tag: $LATEST_TAG"
      
      - name: 🏷️ Determine image tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            # Use the version tag from the bump workflow
            VERSION_TAG="${{ steps.version.outputs.version_tag }}"
            # Remove 'v' prefix if present for docker tag
            CLEAN_VERSION=${VERSION_TAG#v}
            echo "image_tag=$CLEAN_VERSION" >> $GITHUB_OUTPUT
            echo "Using version tag: $CLEAN_VERSION"
          fi

  build-and-push:
    needs: pre-deploy-check
    if: needs.pre-deploy-check.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      image_digest: ${{ steps.push.outputs.digest }}
      
    steps:
      - name: 🧱 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 📦 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.pre-deploy-check.outputs.image_tag }}
            type=raw,value=${{ needs.pre-deploy-check.outputs.version_tag }}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🔨 Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: prod
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ needs.pre-deploy-check.outputs.version_tag }}

  deploy-infrastructure:
    needs: [pre-deploy-check, build-and-push]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    outputs:
      manager_ip: ${{ steps.terraform.outputs.manager_ip }}
      floating_ip: ${{ steps.terraform.outputs.floating_ip }}
    
    steps:
      - name: 🧱 Checkout deployment code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: 📦 Configure Terraform Backend
        working-directory: deployment/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_BACKEND_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_BACKEND_SECRET_KEY }}
        run: |
         cat > backend.tf <<EOF
         terraform {
         backend "s3" {
            bucket   = "${{ secrets.TERRAFORM_STATE_BUCKET }}"
            key      = "turbogate/${{ github.event.inputs.environment || 'production' }}/terraform.tfstate"
            region   = "eu-central-1"
            endpoints = { s3 = "https://turbogate.fsn1.hetzner.cloud" }
            skip_credentials_validation = true
            skip_region_validation      = true
            skip_metadata_api_check     = true
            use_path_style              = true
           }
          }
         EOF
          terraform init -reconfigure








      - name: 🏗️ Terraform Init
        working-directory: deployment/terraform
        env:
         AWS_ACCESS_KEY_ID: ${{ secrets.TF_BACKEND_ACCESS_KEY }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_BACKEND_SECRET_KEY }}
        run: terraform init -reconfigure
      
      - name: 🔍 Terraform Plan
        id: plan
        working-directory: deployment/terraform
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        run: |
          terraform plan -out=tfplan -input=false
      
      - name: 🚀 Terraform Apply
        id: terraform
        working-directory: deployment/terraform
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        run: |
          terraform apply -auto-approve tfplan
          echo "manager_ip=$(terraform output -raw manager_ip)" >> $GITHUB_OUTPUT
          echo "floating_ip=$(terraform output -raw floating_ip)" >> $GITHUB_OUTPUT

  deploy-application:
    needs: [pre-deploy-check, build-and-push, deploy-infrastructure]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: 🧱 Checkout deployment code
        uses: actions/checkout@v4
      
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-core
      
      - name: 📝 Create Ansible inventory
        working-directory: deployment/ansible
        run: |
          cat > inventory/production.yml <<EOF
          all:
            vars:
              ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
              ansible_python_interpreter: /usr/bin/python3
            children:
              swarm_managers:
                hosts:
                  manager:
                    ansible_host: ${{ needs.deploy-infrastructure.outputs.manager_ip }}
                    ansible_user: root
                    swarm_role: manager
              swarm_workers:
                hosts: {}
          EOF
      
      - name: 🔧 Setup Docker Swarm
        working-directory: deployment/ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: |
          ansible-playbook -i inventory/production.yml playbooks/setup-swarm.yml
      
      - name: 🔒 Setup NGINX with SSL
        working-directory: deployment/ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: |
          ansible-playbook -i inventory/production.yml playbooks/setup-nginx.yml \
            -e "domain_name=${{ secrets.DOMAIN_NAME }}" \
            -e "admin_email=${{ secrets.ADMIN_EMAIL }}"
      
      - name: 🚀 Deploy Application
        working-directory: deployment/ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: |
          ansible-playbook -i inventory/production.yml playbooks/deploy-app.yml \
            -e "secret_key=${{ secrets.SECRET_KEY }}" \
            -e "redis_password=${{ secrets.REDIS_PASSWORD }}" \
            -e "image_tag=${{ needs.pre-deploy-check.outputs.image_tag }}" \
            -e "docker_registry=docker.io" \
            -e "domain_name=${{ secrets.DOMAIN_NAME }}" \
            -e "version=${{ needs.pre-deploy-check.outputs.version_tag }}"

  verify-deployment:
    needs: [pre-deploy-check, deploy-infrastructure, deploy-application]
    runs-on: ubuntu-latest
    
    steps:
      - name: ⏳ Wait for services to stabilize
        run: sleep 30
      
      - name: 🏥 Health Check - Direct IP
        run: |
          curl --retry 5 --retry-delay 10 --fail \
            http://${{ needs.deploy-infrastructure.outputs.manager_ip }}/health || \
            echo "Direct IP health check failed (might be normal if firewall blocks direct access)"
      
      - name: 🏥 Health Check - Domain
        run: |
          curl --retry 5 --retry-delay 10 --fail \
            https://${{ secrets.DOMAIN_NAME }}/gateway/health
      
      - name: 🔍 Check Docker Services
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy-infrastructure.outputs.manager_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "=== Docker Service Status ==="
            docker service ls
            echo ""
            echo "=== TurboGate Service Details ==="
            docker service ps turbogate_turbogate --no-trunc
            echo ""
            echo "=== Recent Logs ==="
            docker service logs turbogate_turbogate --tail 50

  rollback:
    needs: [deploy-infrastructure, deploy-application, verify-deployment]
    if: failure() && needs.deploy-application.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔄 Initiate Rollback
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy-infrastructure.outputs.manager_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "⚠️ Deployment verification failed, initiating rollback..."
            
            # Get previous service configuration
            PREV_IMAGE=$(docker service inspect turbogate_turbogate --format='{{.PreviousSpec.TaskTemplate.ContainerSpec.Image}}')
            
            if [ ! -z "$PREV_IMAGE" ]; then
              echo "Rolling back to image: $PREV_IMAGE"
              docker service update --image "$PREV_IMAGE" turbogate_turbogate
            else
              echo "No previous image found, cannot rollback"
              exit 1
            fi

  notify-discord:
    needs: [pre-deploy-check, build-and-push, deploy-infrastructure, deploy-application, verify-deployment]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: 📊 Determine deployment status
        id: status
        run: |
          if [ "${{ needs.pre-deploy-check.outputs.should_deploy }}" != "true" ]; then
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "emoji=⏭️" >> $GITHUB_OUTPUT
            echo "color=8421504" >> $GITHUB_OUTPUT
          elif [ "${{ needs.verify-deployment.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "color=65280" >> $GITHUB_OUTPUT
          elif [ "${{ needs.verify-deployment.result }}" == "failure" ]; then
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "color=16711680" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
            echo "color=16776960" >> $GITHUB_OUTPUT
          fi
      
      - name: 📢 Send Discord notification
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ -z "$WEBHOOK_URL" ]; then
            echo "⚠️ Discord webhook not configured"
            exit 0
          fi
          
          # Calculate deployment duration
          DURATION="${{ job.duration || 'N/A' }}"
          
          # Build deployment info
          if [ "${{ steps.status.outputs.status }}" == "success" ]; then
            DEPLOYMENT_INFO="**URL**: https://${{ secrets.DOMAIN_NAME }}\n**Server IP**: ${{ needs.deploy-infrastructure.outputs.floating_ip || 'N/A' }}\n**Version**: ${{ needs.pre-deploy-check.outputs.version_tag }}"
          else
            DEPLOYMENT_INFO="**Reason**: Check [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi
          
          PAYLOAD=$(jq -n \
            --arg title "TurboGate Deployment ${{ steps.status.outputs.status }}" \
            --arg status "${{ steps.status.outputs.emoji }} ${{ steps.status.outputs.status }}" \
            --arg trigger "${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Automatic (Version Bump)' }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg commit "[${GITHUB_SHA:0:7}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" \
            --arg actor "${{ github.actor }}" \
            --arg workflow "[${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" \
            --arg image_tag "${{ needs.pre-deploy-check.outputs.image_tag || 'N/A' }}" \
            --arg version "${{ needs.pre-deploy-check.outputs.version_tag || 'N/A' }}" \
            --arg deployment_info "$DEPLOYMENT_INFO" \
            --argjson color "${{ steps.status.outputs.color }}" \
            '{
              embeds: [{
                title: $title,
                description: (
                  "**Status**: \($status)\n" +
                  "**Trigger**: \($trigger)\n" +
                  "**Branch**: `\($branch)`\n" +
                  "**Commit**: \($commit)\n" +
                  "**Actor**: @\($actor)\n" +
                  "**Version**: `\($version)`\n" +
                  "**Image Tag**: `\($image_tag)`\n" +
                  "**Workflow**: \($workflow)\n" +
                  "\n\($deployment_info)"
                ),
                color: $color,
                timestamp: now|strftime("%Y-%m-%dT%H:%M:%SZ"),
                footer: {
                  text: "GitHub Actions - Production Deployment",
                  icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                }
              }],
              username: "TurboGate Deploy Bot",
              avatar_url: "https://github.com/${{ github.actor }}.png"
            }')
          
          curl -sS -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$WEBHOOK_URL" || echo "⚠️ Failed to send Discord notification"

  cleanup:
    needs: [deploy-infrastructure, deploy-application, verify-deployment]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: 🧹 Clean up build cache
        uses: actions/github-script@v7
        with:
          script: |
            // Clean up old workflow runs to save storage
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'cd.yml',
              status: 'completed',
              per_page: 100
            });
            
            const oldRuns = runs.data.workflow_runs
              .filter(run => {
                const daysOld = (Date.now() - Date.parse(run.created_at)) / (1000 * 60 * 60 * 24);
                return daysOld > 7;
              });
            
            for (const run of oldRuns) {
              await github.rest.actions.deleteWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run.id
              });
            }