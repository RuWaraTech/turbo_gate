---
- name: Deploy TurboGate Application
  hosts: swarm_managers
  become: yes
  
  vars:
    stack_name: turbogate
    compose_file: /opt/turbogate/docker-compose.yml
    # Variables should be passed via -e or defined in group_vars/host_vars

  tasks:
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - secret_key is defined
          - redis_password is defined
          - domain_name is defined
        fail_msg: "Required variables (secret_key, redis_password, domain_name) must be defined"

    - name: Debug received variables (remove in production)
      ansible.builtin.debug:
        msg:
          - "Secret key defined: {{ secret_key is defined }}"
          - "Redis password defined: {{ redis_password is defined }}"
          - "Domain: {{ domain_name }}"
          - "Image tag: {{ image_tag | default('latest') }}"
          - "App replicas: {{ app_replicas | default(2) }}"
      no_log: true

    - name: Create application directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /opt/turbogate
        - /var/log/turbogate

    - name: Check if Docker secrets already exist
      ansible.builtin.command: docker secret ls --format '{{ '{{' }}.Name{{ '}}' }}'
      register: existing_secrets
      changed_when: false

    - name: Remove existing secrets if they exist
      ansible.builtin.command: docker secret rm {{ item.name }}
      loop:
        - { name: "turbogate_secret_key" }
        - { name: "redis_password" }
      when: item.name in existing_secrets.stdout_lines
      ignore_errors: true

    - name: Create Docker secrets
      community.docker.docker_secret:
        name: "{{ item.name }}"
        data: "{{ item.value | b64encode }}"
        state: present
      loop:
        - { name: "turbogate_secret_key", value: "{{ secret_key }}" }
        - { name: "redis_password", value: "{{ redis_password }}" }
      when: item.value is defined and item.value | length > 0
      no_log: true
    
    - name: Verify overlay network exists
      community.docker.docker_network:
        name: turbogate_network
        driver: overlay
        attachable: yes
        state: present
    
    - name: Create Docker Compose file for the entire stack
      ansible.builtin.copy:
        content: |
          version: '3.8'

          services:
            turbogate:
              image: {{ docker_registry | default('docker.io') }}/{{ image_name | default('fwande/turbogate') }}:{{ image_tag | default('latest') }}
              deploy:
                replicas: {{ app_replicas | default(2) }}
                update_config:
                  parallelism: 1
                  delay: 10s
                  order: start-first
                  failure_action: rollback
                restart_policy:
                  condition: on-failure
                  delay: 5s
                  max_attempts: 3
                  window: 120s
                resources:
                  limits:
                    cpus: '0.5'
                    memory: 512M
                  reservations:
                    cpus: '0.25'
                    memory: 256M
              environment:
                - FLASK_ENV=prod
                - REDIS_URL=redis://redis:6379/0
                - LOG_LEVEL=INFO
                - DOMAIN_NAME={{ domain_name }}
              secrets:
                - source: turbogate_secret_key
                  target: SECRET_KEY
                  mode: 0400
              networks:
                - turbogate_network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5000/gateway/health"]
                interval: 30s
                timeout: 3s
                retries: 3
                start_period: 40s
          
            redis:
              image: redis:7-alpine
              deploy:
                replicas: 1
                placement:
                  constraints: 
                    - node.role == manager
                restart_policy:
                  condition: any
                  delay: 5s
                  max_attempts: 3
              command: redis-server --requirepass-file /run/secrets/redis_password
              secrets:
                - source: redis_password
                  target: redis_password
                  mode: 0400
              networks:
                - turbogate_network
              volumes:
                - redis_data:/data
              healthcheck:
                test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
                interval: 10s
                timeout: 3s
                retries: 5

            nginx:
              image: nginx:alpine
              ports:
                - target: 80
                  published: 80
                  protocol: tcp
                  mode: host
                - target: 443
                  published: 443
                  protocol: tcp
                  mode: host
              deploy:
                replicas: 1
                placement:
                  constraints: 
                    - node.role == manager
                restart_policy:
                  condition: any
                  delay: 5s
                  max_attempts: 3
              volumes:
                - /etc/nginx/sites-available/turbogate:/etc/nginx/conf.d/default.conf:ro
                - /etc/letsencrypt:/etc/letsencrypt:ro
                - nginx_logs:/var/log/nginx
              networks:
                - turbogate_network
              depends_on:
                - turbogate
              healthcheck:
                test: ["CMD", "nginx", "-t"]
                interval: 30s
                timeout: 5s
                retries: 3

          volumes:
            redis_data:
              driver: local
              driver_opts:
                type: none
                o: bind
                device: /var/lib/turbogate/redis
            nginx_logs:
              driver: local
              driver_opts:
                type: none
                o: bind
                device: /var/log/turbogate/nginx

          networks:
            turbogate_network:
              external: true
              name: turbogate_network
          
          secrets:
            turbogate_secret_key:
              external: true
            redis_password:
              external: true
        dest: "{{ compose_file }}"
        owner: root
        group: root
        mode: '0644'
    
    - name: Create directories for volumes
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /var/lib/turbogate/redis
        - /var/log/turbogate/nginx
    
    - name: Check if stack is already deployed
      ansible.builtin.command: docker stack ls --format '{{ '{{' }}.Name{{ '}}' }}'
      register: existing_stacks
      changed_when: false

    - name: Remove existing stack if present
      ansible.builtin.command: docker stack rm {{ stack_name }}
      when: stack_name in existing_stacks.stdout_lines
      register: stack_removed

    - name: Wait for stack removal to complete
      ansible.builtin.pause:
        seconds: 15
      when: stack_removed.changed | default(false)
    
    - name: Deploy Docker stack
      community.docker.docker_stack:
        name: "{{ stack_name }}"
        compose:
          - "{{ compose_file }}"
        state: present
        prune: yes
    
    - name: Wait for services to be ready
      ansible.builtin.pause:
        seconds: 30
    
    - name: Check service status
      ansible.builtin.command: docker service ls --format "table {{ '{{' }}.Name{{ '}}' }}\t{{ '{{' }}.Replicas{{ '}}' }}\t{{ '{{' }}.Mode{{ '}}' }}"
      register: service_status
      changed_when: false
    
    - name: Display service status
      ansible.builtin.debug:
        var: service_status.stdout_lines
    
    - name: Verify all services are running
      ansible.builtin.command: docker service ps {{ stack_name }}_{{ item }} --format '{{ '{{' }}.CurrentState{{ '}}' }}' --filter 'desired-state=running'
      loop:
        - turbogate
        - redis
        - nginx
      register: service_health
      changed_when: false
      failed_when: false
    
    - name: Display service health
      ansible.builtin.debug:
        msg: "{{ item.item }}: {{ item.stdout }}"
      loop: "{{ service_health.results }}"
      when: item.stdout is defined