- name: Deploy TurboGate with Load Balancer SSL Termination
  hosts: swarm_managers
  become: yes
  
  vars:
    stack_name: turbogate
    compose_file: /opt/turbogate/docker-compose-waf.yml
    
  tasks:
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - secret_key is defined
          - redis_password is defined
          - domain_name is defined
          - image_tag is defined
          - ssl_certificate_type == "managed"
        fail_msg: "Required variables must be defined and ssl_certificate_type must be 'managed' for LB SSL termination"

    - name: Verify Load Balancer is reachable
      ansible.builtin.uri:
        url: "https://{{ domain_name }}/lb-health"
        method: GET
        timeout: 10
        validate_certs: yes
        status_code: [200, 502, 503]
      register: lb_ssl_check
      retries: 10
      delay: 30
      until: lb_ssl_check.status != -1

    - name: Create required directories on manager
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /opt/turbogate
        - /var/log/turbogate
        - /var/lib/turbogate/redis

    # IMPROVED: Better directory creation on all swarm nodes
    - name: Get list of all swarm nodes
      ansible.builtin.shell: |
        docker node ls --format '{{ "{{" }}.Hostname{{ "}}" }}' | grep -v "^$"
      register: swarm_nodes
      changed_when: false

    - name: Create required directories on all swarm nodes
      block:
        - name: Create directories on manager node
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            owner: root
            group: root
            mode: '0755'
          loop:
            - /var/log/nginx/waf
            - /var/cache/nginx

        - name: Create directories on worker nodes via docker exec
          ansible.builtin.shell: |
            # Use docker to run commands on each node
            docker node ls --format '{{ "{{" }}.Hostname{{ "}}" }}' | while read node_hostname; do
              if [ "$node_hostname" != "$(hostname)" ]; then
                echo "Creating directories on node: $node_hostname"
                # Try to create a temporary service that runs on the specific node
                docker service create \
                  --name temp-dir-creator-$(date +%s) \
                  --constraint "node.hostname==$node_hostname" \
                  --mode global \
                  --restart-condition none \
                  --mount type=bind,source=/,target=/host \
                  alpine:latest \
                  sh -c "mkdir -p /host/var/log/nginx/waf /host/var/cache/nginx && chmod 755 /host/var/log/nginx/waf /host/var/cache/nginx && echo 'Directories created on' \$(hostname)" || true
                
                # Wait a moment then clean up
                sleep 3
                docker service rm temp-dir-creator-$(date +%s) 2>/dev/null || true
              fi
            done
          register: create_dirs_result
          failed_when: false
          ignore_errors: yes

    - name: Pre-pull nginx-waf image on all nodes
      ansible.builtin.shell: |
        # Pull on manager first
        docker pull owasp/modsecurity-crs:nginx-alpine
        
        # Create a temporary global service to pull image on all nodes
        docker service create \
          --name temp-image-puller \
          --mode global \
          --restart-condition none \
          owasp/modsecurity-crs:nginx-alpine \
          echo "Image pulled on $(hostname)"
        
        # Wait for it to complete then clean up
        sleep 30
        docker service rm temp-image-puller
      register: pull_images
      failed_when: false

    # Alternative approach: Use init containers or named volumes
    - name: Create nginx log volume if using named volumes
      ansible.builtin.shell: "docker volume create nginx_waf_logs || true"
      when: use_named_volumes | default(false)

    # ===================================================================
    # BEGIN: ZERO-DOWNTIME SECRET & CONFIG MANAGEMENT
    # ===================================================================

    - name: Get current timestamp for versioning
      ansible.builtin.set_fact:
        resource_version: "{{ ansible_date_time.epoch }}"

    # Check if stack exists FIRST
    - name: Check if stack exists
      ansible.builtin.command: docker stack ls --format '{{ "{{" }}.Name{{ "}}" }}'
      register: existing_stacks
      changed_when: false
      failed_when: false

    - name: Set stack exists fact
      ansible.builtin.set_fact:
        stack_exists: "{{ stack_name in existing_stacks.stdout_lines }}"

    # --- SECRET MANAGEMENT ---
    - name: Create new versioned Docker secrets
      ansible.builtin.shell: |
        echo -n "{{ item.value }}" | docker secret create {{ item.name }}_v{{ resource_version }} -
      loop:
        - { name: "turbogate_secret_key", value: "{{ secret_key }}" }
        - { name: "redis_password", value: "{{ redis_password }}" }
      no_log: true

    # Only try to create unversioned secrets if stack doesn't exist
    - name: Create unversioned secret aliases (new deployment only)
      ansible.builtin.shell: |
        echo -n "{{ item.value }}" | docker secret create {{ item.name }} -
      loop:
        - { name: "turbogate_secret_key", value: "{{ secret_key }}" }
        - { name: "redis_password", value: "{{ redis_password }}" }
      no_log: true
      when: not stack_exists
      failed_when: false
      ignore_errors: yes
      
    # --- CONFIG MANAGEMENT ---
    - name: Create ModSecurity configuration content in a temporary file
      ansible.builtin.copy:
        dest: "/tmp/modsecurity_{{ resource_version }}.conf"
        content: |
          SecRuleEngine {{ waf_rule_engine | default('On') }}
          SecRequestBodyAccess On
          SecResponseBodyAccess On
          SecResponseBodyMimeType text/plain text/html text/xml application/json
          SecResponseBodyLimit 524288
          SecResponseBodyLimitAction ProcessPartial
          SecAuditEngine {{ waf_audit_engine | default('RelevantOnly') }}
          SecAuditLogRelevantStatus "^(?:5|4(?!04))"
          SecAuditLogParts ABDEFHIJZ
          SecAuditLogType Serial
          SecAuditLog /var/log/nginx/modsec_audit.log

    - name: Create ModSecurity rules content in a temporary file
      ansible.builtin.copy:
        dest: "/tmp/modsecurity_rules_{{ resource_version }}.conf"
        content: |
          Include /etc/nginx/modsecurity/modsecurity.conf
          Include /usr/local/owasp-modsecurity-crs/crs-setup.conf
          Include /usr/local/owasp-modsecurity-crs/rules/*.conf
          SecRule REQUEST_URI "@beginsWith /health" "id:1000,phase:1,pass,nolog,ctl:ruleEngine=Off"
          SecRule REQUEST_URI "@beginsWith /waf-health" "id:1001,phase:1,pass,nolog,ctl:ruleEngine=Off"
          SecRule REQUEST_URI "@beginsWith /lb-health" "id:1002,phase:1,pass,nolog,ctl:ruleEngine=Off"
          SecAction "id:900000,phase:1,nolog,pass,t:none,setvar:tx.paranoia_level={{ waf_paranoia_level | default(2) }}"
          SecAction "id:900001,phase:1,nolog,pass,t:none,setvar:tx.inbound_anomaly_score_threshold={{ waf_anomaly_inbound | default(10) }},setvar:tx.outbound_anomaly_score_threshold={{ waf_anomaly_outbound | default(8) }}"

    - name: Create backend NGINX config content from template
      ansible.builtin.template:
        src: nginx-waf.conf.j2
        dest: "/tmp/nginx-waf_{{ resource_version }}.conf"
        mode: '0644'

    - name: Create versioned configs
      ansible.builtin.command: docker config create {{ item.name }}_v{{ resource_version }} {{ item.path }}
      loop:
        - { name: "modsecurity_config", path: "/tmp/modsecurity_{{ resource_version }}.conf" }
        - { name: "modsecurity_rules", path: "/tmp/modsecurity_rules_{{ resource_version }}.conf" }
        - { name: "nginx_backend_config", path: "/tmp/nginx-waf_{{ resource_version }}.conf" }

    # Only create unversioned configs for new deployments
    - name: Create unversioned config aliases (new deployment only)
      ansible.builtin.command: docker config create {{ item.name }} {{ item.path }}
      loop:
        - { name: "modsecurity_config", path: "/tmp/modsecurity_{{ resource_version }}.conf" }
        - { name: "modsecurity_rules", path: "/tmp/modsecurity_rules_{{ resource_version }}.conf" }
        - { name: "nginx_backend_config", path: "/tmp/nginx-waf_{{ resource_version }}.conf" }
      when: not stack_exists
      failed_when: false
      ignore_errors: yes
    
    - name: Clean up temporary config files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/modsecurity_{{ resource_version }}.conf"
        - "/tmp/modsecurity_rules_{{ resource_version }}.conf"
        - "/tmp/nginx-waf_{{ resource_version }}.conf"

    # ===================================================================
    # END: ZERO-DOWNTIME SECRET & CONFIG MANAGEMENT
    # ===================================================================

    - name: Create overlay networks if not exist
      community.docker.docker_network:
        name: "{{ item }}"
        driver: overlay
        attachable: yes
      loop:
        - turbogate_frontend
        - turbogate_backend
        - turbogate_database

    - name: Create Docker Compose file from template
      ansible.builtin.template:
        src: docker-compose-waf.yml.j2
        dest: "{{ compose_file }}"
        mode: '0644'
        backup: yes

    # Remove existing failing service before deployment
    - name: Remove failing nginx-waf service if exists
      ansible.builtin.shell: |
        if docker service ls --filter name={{ stack_name }}_nginx-waf --format '{{ "{{" }}.Name{{ "}}" }}' | grep -q .; then
          echo "Removing existing failing nginx-waf service"
          docker service rm {{ stack_name }}_nginx-waf || true
          sleep 10
        fi
      register: remove_failing_service
      failed_when: false

    # Proper deployment strategy
    - name: Deploy Docker stack (new deployment)
      community.docker.docker_stack:
        name: "{{ stack_name }}"
        compose:
          - "{{ compose_file }}"
        state: present
        prune: no  # Don't prune on updates
      register: stack_deploy
      when: not stack_exists

    # Rolling update for existing deployment
    - name: Perform rolling update for existing stack
      block:
        - name: Update turbogate service with new secrets
          ansible.builtin.shell: |
            docker service update \
              --secret-rm turbogate_secret_key \
              --secret-add source=turbogate_secret_key_v{{ resource_version }},target=SECRET_KEY \
              --secret-rm redis_password \
              --secret-add source=redis_password_v{{ resource_version }},target=redis_password \
              --update-parallelism 1 \
              --update-delay 30s \
              --update-order start-first \
              {{ stack_name }}_turbogate
          register: turbogate_update

        - name: Update redis service with new password
          ansible.builtin.shell: |
            docker service update \
              --secret-rm redis_password \
              --secret-add source=redis_password_v{{ resource_version }},target=redis_password \
              --update-parallelism 1 \
              --update-delay 30s \
              {{ stack_name }}_redis
          register: redis_update

        - name: Redeploy stack to fix nginx-waf issues
          community.docker.docker_stack:
            name: "{{ stack_name }}"
            compose:
              - "{{ compose_file }}"
            state: present
            prune: yes
          register: stack_redeploy
              
      when: stack_exists

    - name: Wait for services to stabilize
      ansible.builtin.pause:
        seconds: 45

    - name: Verify nginx-waf service is running properly
      ansible.builtin.shell: |
        # Check nginx-waf service status
        replicas=$(docker service ls --filter name={{ stack_name }}_nginx-waf --format '{{ "{{" }}.Replicas{{ "}}" }}')
        if [ -z "$replicas" ]; then
          echo "ERROR: nginx-waf service not found"
          exit 1
        fi
        
        running=$(echo $replicas | cut -d'/' -f1)
        desired=$(echo $replicas | cut -d'/' -f2)
        
        if [ "$running" != "$desired" ] || [ "$running" -lt "1" ]; then
          echo "ERROR: nginx-waf service not running properly. Replicas: $replicas"
          docker service ps {{ stack_name }}_nginx-waf --no-trunc
          exit 1
        fi
        
        echo "✅ nginx-waf service running with replicas: $replicas"
      register: nginx_service_check
      retries: 6
      delay: 10
      until: nginx_service_check.rc == 0

    - name: Final health check via Load Balancer
      ansible.builtin.uri:
        url: "https://{{ domain_name }}/health"
        method: GET
        status_code: 200
        timeout: 15
        validate_certs: yes
      register: lb_https_health
      retries: 12
      delay: 15
      until: lb_https_health.status == 200

    - name: Display deployment summary
      ansible.builtin.debug:
        msg: |
          ✅ DEPLOYMENT COMPLETE ✅
          Stack: {{ stack_name }}
          Domain: https://{{ domain_name }}
          Access URL: https://{{ domain_name }}/health
          Resource Version: {{ resource_version }}
          Deployment Type: {{ 'New Deployment' if not stack_exists else 'Rolling Update' }}