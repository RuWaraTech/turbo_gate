---
- name: Deploy TurboGate Application
  hosts: swarm_managers
  become: yes
  
  vars:
    stack_name: turbogate
    compose_file: /opt/turbogate/docker-compose.yml
  
  tasks:

    # - name: Debug received secret_key (for troubleshooting)
    #   ansible.builtin.debug:
    #     var: secret_key
    #   # no_log: true # Keep this for sensitive data!
    #   when: ansible_check_mode is not defined or not ansible_check_mode # Only run in normal mode

    # - name: Debug received redis_password (for troubleshooting)
    #   ansible.builtin.debug:
    #     var: redis_password
    #   no_log: true # Keep this for sensitive data!
    #   when: ansible_check_mode is not defined or not ansible_check_mode # Only run in normal mode

    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /opt/turbogate
    
    - name: Create Docker network
      docker_network:
        name: turbogate_net
        driver: overlay
        attachable: yes
    
    - name: Create Docker Compose file for the entire stack
      copy:
        content: |
          version: '3.8'

          services:
            turbogate:
              image: {{ docker_registry }}/{{ image_name | default('fwande/turbogate') }}:{{ image_tag }}
              deploy:
                replicas: {{ app_replicas | default(2) }}
                update_config:
                  parallelism: 1
                  delay: 10s
                  order: start-first
                restart_policy:
                  condition: on-failure
                  delay: 5s
                  max_attempts: 3
                resources:
                  limits:
                    cpus: '0.5'
                    memory: 512M
                  reservations:
                    cpus: '0.25'
                    memory: 256M
              environment:
                - FLASK_ENV=prod
                - REDIS_URL=redis://:{{ redis_password }}@redis:6379/0
                - LOG_LEVEL=INFO
                - DOMAIN_NAME={{ domain_name }}
                - SECRET_KEY={{ secret_key }}
                - REDIS_PASSWORD={{ redis_password }}
              networks:
                - turbogate_net
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5000/gateway/health"]
                interval: 30s
                timeout: 3s
                retries: 3
                start_period: 40s
          
            redis:
              image: redis:7-alpine
              deploy:
                replicas: 1
                placement:
                  constraints: [node.role == manager]
              command: redis-server --requirepass {{ redis_password }}
              networks:
                - turbogate_net
              volumes:
                - redis_data:/data
              healthcheck:
                test: ["CMD", "redis-cli", "-a", "{{ redis_password }}", "ping"]
                interval: 10s
                timeout: 3s
                retries: 5

            nginx:
              image: nginx:alpine
              ports:
                - "80:80"
                - "443:443"
              deploy:
                replicas: 1
                placement:
                  constraints: [node.role == manager]
              volumes:
                - /etc/nginx/sites-available/turbogate:/etc/nginx/conf.d/default.conf:ro
                - /etc/letsencrypt:/etc/letsencrypt:ro
                - nginx_logs:/var/log/nginx
              networks:
                - turbogate_net
              depends_on:
                - turbogate

          volumes:
            redis_data:
              driver: local
            nginx_logs:
              driver: local

          networks:
            turbogate_net:
              external: true
        dest: "{{ compose_file }}"
        owner: root
        group: root
        mode: '0644'
    
    - name: Deploy Docker stack
      docker_stack:
        name: "{{ stack_name }}"
        compose:
          - "{{ compose_file }}"
        state: present
    
    - name: Wait for services to be ready
      pause:
        seconds: 30
    
    - name: Check service status
      command: docker service ls
      register: service_status
      changed_when: false
    
    - name: Display service status
      debug:
        var: service_status.stdout_lines