---
- name: Deploy TurboGate Application with Zero Downtime
  hosts: swarm_managers
  become: yes
  
  vars:
    stack_name: turbogate
    compose_file: /opt/turbogate/docker-compose.yml
    health_check_timeout: 120
    deployment_timeout: 300

  tasks:
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - secret_key is defined
          - redis_password is defined
          - domain_name is defined
          - image_tag is defined
        fail_msg: "Required variables (secret_key, redis_password, domain_name, image_tag) must be defined"

    - name: Create application directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /opt/turbogate
        - /var/log/turbogate
        - /var/lib/turbogate/redis
        - /var/log/turbogate/nginx
        - /var/cache/nginx
        
    - name: Set correct ownership for NGINX cache directory
      ansible.builtin.file:
        path: /var/cache/nginx
        state: directory
        owner: 101
        group: 101
        mode: '0755'
        recurse: yes

    # Pre-deployment health check
    - name: Check current deployment health
      ansible.builtin.uri:
        url: "https://ridebase.app/health"
        method: GET
        status_code: [200, 404, 502]
      register: pre_deploy_health
      failed_when: false
      changed_when: false

    - name: Display pre-deployment status
      ansible.builtin.debug:
        msg: "Current deployment status: {{ pre_deploy_health.status | default('Unknown') }}"

    # Secrets management with better error handling
    - name: Check existing secrets
      ansible.builtin.command: docker secret ls --format '{{ "{{" }}.Name{{ "}}" }}'
      register: existing_secrets
      changed_when: false
      failed_when: false

    - name: Create or update Docker secrets
      ansible.builtin.shell: |
        # Remove existing secret if it exists
        if docker secret inspect {{ item.name }} >/dev/null 2>&1; then
          echo "Removing existing secret: {{ item.name }}"
          docker secret rm {{ item.name }} || true
          sleep 2
        fi
        # Create new secret
        echo -n "{{ item.value }}" | docker secret create {{ item.name }} -
      loop:
        - { name: "turbogate_secret_key", value: "{{ secret_key }}" }
        - { name: "redis_password", value: "{{ redis_password }}" }
      no_log: true
      register: secret_creation
      failed_when: secret_creation.rc != 0

    # Create NGINX config as Docker config
    - name: Create NGINX configuration content
      ansible.builtin.template:
        src: nginx.conf.j2 
        dest: /tmp/nginx.conf
        owner: root
        group: root
        mode: '0644'

    - name: Create or update NGINX config as Docker config
      ansible.builtin.shell: |
        # Remove existing config if it exists
        if docker config inspect nginx_config >/dev/null 2>&1; then
          echo "NGINX config already exists, will be updated during deployment"
        else
          # Create new config
          docker config create nginx_config /tmp/nginx.conf
        fi
      register: nginx_config_result
      failed_when: false

    - name: Clean up temporary nginx config file
      ansible.builtin.file:
        path: /tmp/nginx.conf
        state: absent
    
    - name: Verify overlay network exists
      community.docker.docker_network:
        name: turbogate_network
        driver: overlay
        attachable: yes
        state: present
    
    - name: Create Docker Compose file
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: "{{ compose_file }}"
        owner: root
        group: root
        mode: '0644'
        backup: yes
    
    # Pre-pull images for faster deployment
    - name: Pre-pull Docker images on all nodes
      ansible.builtin.command: |
        docker service create --mode global --name temp-pull-{{ ansible_date_time.epoch }} \
        --constraint 'node.platform.os==linux' \
        --restart-condition none \
        {{ docker_registry | default('docker.io') }}/{{ image_name | default('fwande/turbogate') }}:{{ image_tag }} \
        /bin/true
      register: image_pull
      failed_when: false
      changed_when: false

    - name: Wait for image pull to complete
      ansible.builtin.pause:
        seconds: 30
      when: image_pull.rc == 0

    - name: Clean up image pull service
      ansible.builtin.command: docker service rm temp-pull-{{ ansible_date_time.epoch }}
      failed_when: false
      when: image_pull.rc == 0

    # Check current stack state
    - name: Check current stack status
      ansible.builtin.command: docker stack ls --format '{{ "{{" }}.Name{{ "}}" }}'
      register: existing_stacks
      changed_when: false

    - name: Get current service info if stack exists
      ansible.builtin.command: |
        docker service inspect {{ stack_name }}_turbogate --format '{{ "{{" }}.Spec.TaskTemplate.ContainerSpec.Image{{ "}}" }}'
      register: current_image
      when: stack_name in existing_stacks.stdout_lines
      failed_when: false
      changed_when: false

    - name: Display current vs new image
      ansible.builtin.debug:
        msg:
          - "Current image: {{ current_image.stdout | default('None') }}"
          - "New image: {{ docker_registry | default('docker.io') }}/{{ image_name | default('fwande/turbogate') }}:{{ image_tag }}"
      when: current_image is defined

    # Zero-downtime deployment strategy
    - name: Deploy or update Docker stack with zero downtime
      block:
        - name: Deploy Docker stack
          community.docker.docker_stack:
            name: "{{ stack_name }}"
            compose:
              - "{{ compose_file }}"
            state: present
            prune: yes
          register: stack_deploy
          timeout: "{{ deployment_timeout }}"

        - name: Wait for new tasks to start
          ansible.builtin.pause:
            seconds: 30

        - name: Monitor deployment progress
          ansible.builtin.shell: |
            # Check if all services have desired number of replicas
            TURBOGATE_REPLICAS=$(docker service inspect {{ stack_name }}_turbogate --format '{{ "{{" }}.Spec.Mode.Replicated.Replicas{{ "}}" }}')
            REDIS_REPLICAS=$(docker service inspect {{ stack_name }}_redis --format '{{ "{{" }}.Spec.Mode.Replicated.Replicas{{ "}}" }}')
            NGINX_REPLICAS=$(docker service inspect {{ stack_name }}_nginx --format '{{ "{{" }}.Spec.Mode.Replicated.Replicas{{ "}}" }}')
            
            # Count running tasks
            TURBOGATE_RUNNING=$(docker service ps {{ stack_name }}_turbogate --filter "desired-state=running" --format "{{ "{{" }}.CurrentState{{ "}}" }}" | grep -c "Running" || echo "0")
            REDIS_RUNNING=$(docker service ps {{ stack_name }}_redis --filter "desired-state=running" --format "{{ "{{" }}.CurrentState{{ "}}" }}" | grep -c "Running" || echo "0")
            NGINX_RUNNING=$(docker service ps {{ stack_name }}_nginx --filter "desired-state=running" --format "{{ "{{" }}.CurrentState{{ "}}" }}" | grep -c "Running" || echo "0")
            
            echo "TurboGate: $TURBOGATE_RUNNING/$TURBOGATE_REPLICAS running"
            echo "Redis: $REDIS_RUNNING/$REDIS_REPLICAS running"
            echo "NGINX: $NGINX_RUNNING/$NGINX_REPLICAS running"
            
            # Return success if all services have desired replicas running
            if [ "$TURBOGATE_RUNNING" -ge "$TURBOGATE_REPLICAS" ] && \
               [ "$REDIS_RUNNING" -ge "$REDIS_REPLICAS" ] && \
               [ "$NGINX_RUNNING" -ge "$NGINX_REPLICAS" ]; then
              exit 0
            else
              exit 1
            fi
          register: deployment_status
          retries: 20
          delay: 15
          until: deployment_status.rc == 0
          failed_when: false

      rescue:
        - name: Deployment failed, check for rollback
          ansible.builtin.debug:
            msg: "Deployment failed, Docker Swarm should automatically rollback"
        
        - name: Wait for automatic rollback
          ansible.builtin.pause:
            seconds: 60
        
        - name: Check rollback status
          ansible.builtin.shell: |
            docker service ps {{ stack_name }}_turbogate --no-trunc --format "table {{ "{{" }}.Name{{ "}}" }}\t{{ "{{" }}.CurrentState{{ "}}" }}\t{{ "{{" }}.Error{{ "}}" }}"
          register: rollback_status
          
        - name: Display rollback status
          ansible.builtin.debug:
            var: rollback_status.stdout_lines
            
        - name: Fail deployment
          ansible.builtin.fail:
            msg: "Deployment failed and rollback completed"

    # Health verification with retry logic
    - name: Verify service health with retries
      ansible.builtin.uri:
        url: "http://localhost/health"
        method: GET
        status_code: 200
        timeout: 10
      register: health_check
      retries: 12
      delay: 10
      until: health_check.status == 200
      failed_when: false

    - name: Verify application endpoints
      ansible.builtin.uri:
        url: "http://localhost/gateway/health"
        method: GET
        status_code: 200
        timeout: 10
      register: app_health_check
      retries: 8
      delay: 10
      until: app_health_check.status == 200
      failed_when: false

    # Post-deployment verification
    - name: Get detailed service status
      ansible.builtin.shell: |
        echo "=== Service Overview ==="
        docker service ls --filter "name={{ stack_name }}_"
        echo ""
        echo "=== TurboGate Service Details ==="
        docker service ps {{ stack_name }}_turbogate --no-trunc
        echo ""
        echo "=== NGINX Service Details ==="
        docker service ps {{ stack_name }}_nginx --no-trunc
        echo ""
        echo "=== Redis Service Details ==="
        docker service ps {{ stack_name }}_redis --no-trunc
      register: detailed_status
      changed_when: false
    
    - name: Display detailed service status
      ansible.builtin.debug:
        var: detailed_status.stdout_lines

    # Clean up old/failed tasks
    - name: Clean up failed tasks (optional)
      ansible.builtin.shell: |
        # Remove old tasks that are in failed/shutdown state (older than 30 minutes)
        docker service ps {{ stack_name }}_turbogate --filter "desired-state=shutdown" --format "{{ "{{" }}.ID{{ "}}" }}" | head -5 | \
        xargs -r -I {} sh -c 'docker inspect --format="{{ "{{" }}.Status.Timestamp{{ "}}" }}" {} | \
        xargs -I time sh -c "if [ \$(( \$(date +%s) - \$(date -d time +%s) )) -gt 1800 ]; then echo {}; fi"' | \
        head -3
      register: cleanup_tasks
      changed_when: false
      failed_when: false

    - name: Final deployment verification
      ansible.builtin.assert:
        that:
          - health_check.status == 200
          - app_health_check.status == 200
          - deployment_status.rc == 0
        fail_msg: "Deployment verification failed. Check service logs and status."
        success_msg: "Zero-downtime deployment completed successfully!"

    - name: Deployment summary
      ansible.builtin.debug:
        msg:
          - "=== DEPLOYMENT SUCCESSFUL ==="
          - "Stack: {{ stack_name }}"
          - "Image: {{ docker_registry | default('docker.io') }}/{{ image_name | default('fwande/turbogate') }}:{{ image_tag }}"
          - "Domain: {{ domain_name }}"
          - "Health Status: {{ health_check.status }}/{{ app_health_check.status }}"
          - "Monitor with: docker service logs {{ stack_name }}_turbogate --follow"