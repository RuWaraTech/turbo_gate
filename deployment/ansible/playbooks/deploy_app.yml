- name: Deploy TurboGate with Load Balancer SSL Termination
  hosts: swarm_managers
  become: yes
  
  vars:
    stack_name: turbogate
    compose_file: /opt/turbogate/docker-compose-waf.yml
    
  tasks:
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - secret_key is defined
          - redis_password is defined
          - domain_name is defined
          - image_tag is defined
          - ssl_certificate_type == "managed"
        fail_msg: "Required variables must be defined and ssl_certificate_type must be 'managed' for LB SSL termination"

    - name: Verify Load Balancer is reachable
      ansible.builtin.uri:
        url: "https://{{ domain_name }}/lb-health"
        method: GET
        timeout: 10
        validate_certs: yes
        status_code: [200, 502, 503]
      register: lb_ssl_check
      retries: 10
      delay: 30
      until: lb_ssl_check.status != -1

    - name: Create required directories on manager node
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /opt/turbogate
        - /var/log/turbogate
        - /var/lib/turbogate/redis

    - name: Get the list of all swarm node hostnames
      ansible.builtin.command: docker node ls --format '{{ '{{' }}.Hostname{{ '}}' }}'
      register: swarm_node_hostnames
      changed_when: false
      run_once: true

    - name: Create NGINX directories on ALL swarm nodes
      ansible.builtin.file:
        path: "{{ item.1 }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      delegate_to: "{{ item.0 }}"
      delegate_facts: true
      loop: "{{ swarm_node_hostnames.stdout_lines | product(['/var/log/nginx/waf', '/var/cache/nginx']) | list }}"

    - name: Pre-pull required images on all nodes
      ansible.builtin.command: docker image pull {{ image }}
      delegate_to: "{{ node_hostname }}"
      loop: "{{ swarm_node_hostnames.stdout_lines | product(image_list) | list }}"
      loop_control:
        label: "{{ item.0 }}:{{ item.1 }}"
      vars:
        node_hostname: "{{ item.0 }}"
        image: "{{ item.1 }}"
        image_list:
          - owasp/modsecurity-crs:nginx-alpine
          - "{{ docker_registry | default('docker.io') }}/{{ image_name | default('fwande/turbogate') }}:{{ image_tag | default('latest') }}"
          - redis:7-alpine

    # ===================================================================
    # BEGIN: SIMPLIFIED SECRET & CONFIG MANAGEMENT (NON-VERSIONED)
    # ===================================================================
    - name: Check if stack already exists
      ansible.builtin.command: docker stack ls --format '{{ '{{' }}.Name{{ '}}' }}'
      register: existing_stacks
      changed_when: false
      failed_when: false

    - name: Set fact for stack existence
      ansible.builtin.set_fact:
        stack_exists: "{{ stack_name in existing_stacks.stdout_lines }}"

    # --- SECRET MANAGEMENT ---
    - name: Create or update Docker secrets (non-versioned)
      ansible.builtin.shell:
        cmd: |
          if docker secret inspect {{ item.name }} >/dev/null 2>&1; then
            echo "Updating existing secret {{ item.name }}"
            echo -n "{{ item.value }}" | docker secret update {{ item.name }} -
          else
            echo "Creating new secret {{ item.name }}"
            echo -n "{{ item.value }}" | docker secret create {{ item.name }} -
          fi
      loop:
        - { name: "turbogate_secret_key", value: "{{ secret_key }}" }
        - { name: "redis_password", value: "{{ redis_password }}" }
      no_log: true
      register: secret_management
      failed_when: secret_management.rc != 0

    # --- CONFIG MANAGEMENT ---
    - name: Create config files from templates
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "/tmp/{{ item.dest }}"
        mode: '0644'
      loop:
        - { src: "templates/modsecurity.conf.j2", dest: "modsecurity.conf" }
        - { src: "templates/modsecurity_rules.conf.j2", dest: "modsecurity_rules.conf" }
        - { src: "templates/nginx-waf.conf.j2", dest: "nginx-waf.conf" }

    - name: Create or update Docker configs (non-versioned)
      ansible.builtin.shell:
        cmd: |
          if docker config inspect {{ item.name }} >/dev/null 2>&1; then
            echo "Removing existing config {{ item.name }}"
            docker config rm {{ item.name }}
          fi
          echo "Creating config {{ item.name }}"
          docker config create {{ item.name }} {{ item.path }}
      loop:
        - { name: "nginx_backend_config", path: "/tmp/nginx-waf.conf" }
        - { name: "modsecurity_config", path: "/tmp/modsecurity.conf" }
        - { name: "modsecurity_rules", path: "/tmp/modsecurity_rules.conf" }
      register: config_management
    # ===================================================================
    # END: SIMPLIFIED SECRET & CONFIG MANAGEMENT
    # ===================================================================

    - name: Create overlay networks if they do not exist
      community.docker.docker_network:
        name: "{{ item }}"
        driver: overlay
        attachable: yes
      loop:
        - turbogate_frontend
        - turbogate_backend
        - turbogate_database

    - name: Create Docker Compose file from template for deployment
      ansible.builtin.template:
        src: docker-compose-waf.yml.j2
        dest: "{{ compose_file }}"
        mode: '0644'

    - name: Deploy or update the Docker stack
      community.docker.docker_stack:
        name: "{{ stack_name }}"
        state: present
        compose:
          - "{{ compose_file }}"
        prune: yes
        with_registry_auth: yes

    - name: Wait for services to stabilize after deployment
      ansible.builtin.pause:
        seconds: 45

    # ===================================================================
    # BEGIN: CLEANUP
    # ===================================================================
    - name: Clean up temporary config files from manager
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/modsecurity.conf"
        - "/tmp/modsecurity_rules.conf"
        - "/tmp/nginx-waf.conf"
    # ===================================================================
    # END: CLEANUP
    # ===================================================================

    - name: Verify nginx-waf service is running properly
      ansible.builtin.shell: |
        replicas=$(docker service ls --filter name={{ stack_name }}_nginx-waf --format '{{ '{{' }}.Replicas{{ '}}' }}')
        if [ -z "$replicas" ]; then
          echo "ERROR: nginx-waf service not found"
          exit 1
        fi
        running=$(echo $replicas | cut -d'/' -f1)
        desired=$(echo $replicas | cut -d'/' -f2)
        if [ "$running" != "$desired" ] || [ "$running" -lt "1" ]; then
          echo "ERROR: nginx-waf service not running properly. Replicas: $replicas"
          docker service ps {{ stack_name }}_nginx-waf --no-trunc
          exit 1
        fi
        echo "✅ nginx-waf service running with replicas: $replicas"
      register: nginx_service_check
      retries: 6
      delay: 10
      until: nginx_service_check.rc == 0

    - name: Final health check via Load Balancer
      ansible.builtin.uri:
        url: "https://{{ domain_name }}/health"
        method: GET
        status_code: 200
        timeout: 15
        validate_certs: yes
      register: lb_https_health
      retries: 12
      delay: 15
      until: lb_https_health.status == 200

    - name: Display deployment summary
      ansible.builtin.debug:
        msg: |
          ✅ DEPLOYMENT COMPLETE ✅
          Stack: {{ stack_name }}
          Domain: https://{{ domain_name }}
          Deployment Type: {{ 'New Deployment' if not stack_exists else 'Rolling Update' }}