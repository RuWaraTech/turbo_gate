---
- name: Deploy TurboGate Application Stack
  hosts: swarm_managers
  become: yes

  vars:
    stack_name: turbogate
    compose_file: /opt/turbogate/docker-compose-waf.yml

  tasks:
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - secret_key is defined
          - redis_password is defined
          - domain_name is defined
          - image_tag is defined
        fail_msg: "One or more required variables (secret_key, redis_password, domain_name, image_tag) are not defined."

    - name: Check if stack already exists to determine deployment type
      # FIXED: Quoted the command string
      ansible.builtin.command: "docker stack ls --format '{{ '{{' }}.Name{{ '}}' }}'"
      register: existing_stacks
      changed_when: false

    - name: Set fact for stack existence
      ansible.builtin.set_fact:
        stack_exists: "{{ stack_name in existing_stacks.stdout_lines }}"

    - name: Get current timestamp for versioning resources
      ansible.builtin.set_fact:
        resource_version: "{{ ansible_date_time.epoch }}"
      run_once: true

    - name: Create required directories on manager node
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode | default('0755') }}"
      loop:
        - { path: "/opt/turbogate" }
        - { path: "/opt/turbogate/dynamic" }
        - { path: "/var/log/turbogate" }
        - { path: "/var/lib/turbogate/redis", owner: "999", group: "999" }

    - name: Pre-pull required images on all nodes
      community.docker.docker_image:
        name: "{{ item.image }}"
        source: pull
      delegate_to: "{{ item.node_hostname }}"
      loop: "{{ ansible_play_hosts_all | product(image_list) | map('combine', {'node_hostname': 'item.0', 'image': 'item.1'}) }}"
      loop_control:
        label: "{{ item.node_hostname }}: {{ item.image }}"
      vars:
        image_list:
          - traefik:v3.4
          - owasp/modsecurity-crs:4.3.0-apache-alpine
          - "{{ docker_registry | default('docker.io') }}/{{ image_name | default('fwande/turbogate') }}:{{ image_tag }}"
          - redis:7-alpine

    # --- SECRET & CONFIG MANAGEMENT ---
    - name: Create new versioned Docker secrets
      ansible.builtin.shell:
        cmd: "echo -n \"{{ item.value }}\" | docker secret create {{ item.name }}_v{{ resource_version }} -"
      loop:
        - { name: "turbogate_secret_key", value: "{{ secret_key }}" }
        - { name: "redis_password", value: "{{ redis_password }}" }
      no_log: true

    - name: Create versioned config files from templates
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "/tmp/{{ item.dest }}_{{ resource_version }}"
        mode: '0644'
      loop:
        - { src: "templates/tls.yaml.j2", dest: "tls.yaml" }
        - { src: "templates/custom-exclusions.conf.j2", dest: "custom-exclusions.conf" }

    - name: Create versioned Docker configs
      # FIXED: Quoted the command string
      ansible.builtin.command: "docker config create {{ item.name }}_v{{ resource_version }} {{ item.path }}"
      loop:
        - { name: "traefik_tls_config", path: "/tmp/tls.yaml_{{ resource_version }}" }
        - { name: "modsecurity_exclusions", path: "/tmp/custom-exclusions.conf_{{ resource_version }}" }

    # --- NETWORK MANAGEMENT ---
    - name: Create stack-specific overlay network if it does not exist
      community.docker.docker_network:
        name: "traefik_proxy"
        driver: overlay
        attachable: yes

    # --- DEPLOYMENT ---
    - name: Create Docker Compose file from template
      ansible.builtin.template:
        src: docker-compose-waf.yml.j2
        dest: "{{ compose_file }}"
        mode: '0644'

    - name: Deploy or update the Docker stack
      community.docker.docker_stack:
        name: "{{ stack_name }}"
        state: present
        compose:
          - "{{ compose_file }}"
        prune: yes
        with_registry_auth: yes

    - name: Wait for services to stabilize after deployment
      ansible.builtin.pause:
        seconds: 45

    # --- CLEANUP OF OLD RESOURCES ---
    - name: Get list of old secrets to remove
      # FIXED: Quoted the shell command string
      ansible.builtin.shell: "docker secret ls --filter 'name={{ item.name }}' --format '{{ '{{' }}.Name{{ '}}' }}' | grep -v 'v{{ resource_version }}' || true"
      register: old_secrets
      loop:
        - { name: "turbogate_secret_key" }
        - { name: "redis_password" }
      changed_when: false
      when: stack_exists

    - name: Remove old versioned secrets
      ansible.builtin.command: "docker secret rm {{ item }}"
      loop: "{{ old_secrets.results | map(attribute='stdout_lines') | flatten }}"
      when: stack_exists and item != ""

    - name: Get list of old configs to remove
      # FIXED: Quoted the shell command string
      ansible.builtin.shell: "docker config ls --filter 'name={{ item.name }}' --format '{{ '{{' }}.Name{{ '}}' }}' | grep -v 'v{{ resource_version }}' || true"
      register: old_configs
      loop:
        - { name: "traefik_tls_config" }
        - { name: "modsecurity_exclusions" }
      changed_when: false
      when: stack_exists

    - name: Remove old versioned configs
      ansible.builtin.command: "docker config rm {{ item }}"
      loop: "{{ old_configs.results | map(attribute='stdout_lines') | flatten }}"
      when: stack_exists and item != ""

    - name: Clean up temporary config files from manager
      ansible.builtin.file:
        path: "/tmp/{{ item }}_{{ resource_version }}"
        state: absent
      loop:
        - "tls.yaml"
        - "custom-exclusions.conf"

    # --- VERIFICATION ---
    - name: Verify application services are running properly
      ansible.builtin.shell: |
        replicas=$(docker service ls --filter name={{ stack_name }}_{{ item }} --format '{{ '{{' }}.Replicas{{ '}}' }}')
        if [ -z "$replicas" ]; then
          echo "ERROR: {{ item }} service not found"
          exit 1
        fi
        running=$(echo $replicas | cut -d'/' -f1)
        desired=$(echo $replicas | cut -d'/' -f2)
        if [ "$running" != "$desired" ] || [ "$running" -lt "1" ]; then
          echo "ERROR: {{ item }} service not running properly. Replicas: $replicas"
          docker service ps {{ stack_name }}_{{ item }} --no-trunc
          exit 1
        fi
        echo "✅ {{ item }} service running with replicas: $replicas"
      loop:
        - modsecurity
        - turbogate
        - traefik
      register: service_check
      retries: 6
      delay: 10
      until: service_check.rc == 0

    - name: Final health check via domain
      ansible.builtin.uri:
        # FIXED: Changed to https and added validate_certs:no for flexibility
        url: "https://{{ domain_name }}/gateway/health"
        method: GET
        status_code: 200
        timeout: 15
        validate_certs: no
      register: http_health
      retries: 12
      delay: 15
      until: http_health.status == 200

    - name: Display deployment summary
      ansible.builtin.debug:
        msg: |
          ✅ DEPLOYMENT COMPLETE ✅
          Stack: {{ stack_name }}
          Domain: https://{{ domain_name }}
          Image Tag: {{ image_tag }}
          Deployment Type: {{ 'New Deployment' if not stack_exists else 'Rolling Update' }}