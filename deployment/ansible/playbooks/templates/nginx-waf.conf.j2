user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

# Load ModSecurity module
load_module modules/ngx_http_modsecurity_module.so;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ModSecurity configuration
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity/main.conf;

    # Dynamic upstream resolution
    resolver 127.0.0.11 valid=30s ipv6=off;

    # Real IP configuration for Load Balancer and Docker networks
    set_real_ip_from 10.0.0.0/8;      # Hetzner private network
    set_real_ip_from 172.16.0.0/12;   # Docker networks
    set_real_ip_from 192.168.0.0/16;  # Common internal networks
    
    # Specific subnets from your infrastructure
    set_real_ip_from 10.0.1.0/24;     # Management subnet
    set_real_ip_from 10.0.2.0/24;     # Application subnet
    set_real_ip_from 10.0.3.0/24;     # Database subnet
    set_real_ip_from 10.0.4.0/24;     # Monitoring subnet (Load Balancer)
    
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=burst_limit:10m rate=50r/m;
    limit_req_zone $binary_remote_addr zone=health_limit:10m rate=100r/m;
    limit_req_status 429;

    # Cache configuration
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;

    # Enhanced logging with WAF information
    log_format waf_combined '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           'forwarded_for: $http_x_forwarded_for '
                           'modsec_anomaly_score: $upstream_http_x_modsecurity_anomaly_score '
                           'modsec_rules_triggered: $upstream_http_x_modsecurity_rules_matched';
    
    access_log /var/log/nginx/access.log waf_combined;

    # WebSocket upgrade handling
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # HTTP server - handles Let's Encrypt challenges and redirects
    server {
        listen 80;
        listen [::]:80;
        server_name {{ domain_name }} www.{{ domain_name }};

        # Disable ModSecurity for Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            modsecurity off;
            root /var/www/certbot;
            allow all;
            try_files $uri =404;
        }
        
        # Health check endpoint (no WAF)
        location = /lb-health {
            modsecurity off;
            access_log off;
            return 200 "NGINX WAF OK\n";
            add_header Content-Type text/plain;
        }

        # WAF-specific health check
        location = /waf-health {
            modsecurity off;
            access_log off;
            return 200 "WAF Status: Active\nParanoia Level: {{ waf_paranoia_level | default(2) }}\n";
            add_header Content-Type text/plain;
            add_header X-WAF-Version "ModSecurity 3 with OWASP CRS";
        }
        
        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server with full WAF protection
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name {{ domain_name }} www.{{ domain_name }};

        # SSL configuration - using Certbot certificates
        ssl_certificate /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}/privkey.pem;
        
        # Strong SSL security settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 24h;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/letsencrypt/live/{{ domain_name }}/chain.pem;
        
        # DNS resolver for OCSP stapling
        resolver 127.0.0.11 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;
        
        # WAF information headers (for debugging - remove in production if desired)
        add_header X-WAF-Protection "OWASP ModSecurity CRS {{ waf_paranoia_level | default(2) }}" always;
        add_header X-Deployment-Version "{{ version | default('unknown') }}" always;

        # Enhanced logging
        access_log /var/log/nginx/turbogate_access.log waf_combined buffer=32k flush=5s;
        error_log /var/log/nginx/turbogate_error.log warn;
        
        # Client settings
        client_max_body_size 10M;
        client_body_buffer_size 128k;
        client_body_timeout 12;
        client_header_timeout 12;
        
        # Proxy settings
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;
        proxy_busy_buffers_size 16k;
        proxy_temp_file_write_size 64k;
        
        # Connection reuse
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Health check endpoints (bypass WAF for monitoring)
        location = /health {
            modsecurity off;
            access_log off;
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend/gateway/health;
            
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            limit_req zone=health_limit burst=10 nodelay;
        }
        
        location = /lb-health {
            modsecurity off;
            access_log off;
            return 200 "NGINX WAF OK\n";
            add_header Content-Type text/plain;
        }

        location = /waf-health {
            modsecurity off;
            access_log off;
            return 200 "WAF Active - Paranoia Level {{ waf_paranoia_level | default(2) }}\n";
            add_header Content-Type text/plain;
        }

        # WAF test endpoint (to verify WAF is working)
        location = /waf-test {
            return 200 "If you can see this, the WAF allowed your request\n";
            add_header Content-Type text/plain;
            add_header X-WAF-Test "This endpoint is protected by ModSecurity";
        }
        
        # Main application with full WAF protection
        location / {
            # ModSecurity is enabled by default (inherited from http block)
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # Pass ModSecurity information to backend
            proxy_set_header X-ModSecurity-Anomaly-Score $upstream_http_x_modsecurity_anomaly_score;
            proxy_set_header X-ModSecurity-Rules-Matched $upstream_http_x_modsecurity_rules_matched;
            
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;
            
            # Error handling
            error_page 502 503 504 = @fallback;
            
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;
        }
        
        # Gateway API with enhanced WAF rules
        location /gateway/ {
            # Gateway gets extra scrutiny from WAF
            modsecurity_rules '
                SecRule REQUEST_METHOD "@streq POST" \
                    "id:2000,\
                    phase:1,\
                    pass,\
                    nolog,\
                    msg:\"Gateway POST request\",\
                    setvar:tx.gateway_request=1"
                
                SecRule TX:gateway_request "@eq 1" \
                    "id:2001,\
                    phase:2,\
                    pass,\
                    nolog,\
                    msg:\"Apply stricter rules for gateway\",\
                    setvar:tx.anomaly_score_threshold=5"
            ';
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # Stricter rate limiting for API
            limit_req zone=api_limit burst=10 nodelay;
            limit_req zone=burst_limit burst=5 nodelay;
            
            # API caching
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_bypass $http_authorization $cookie_session $arg_no_cache;
            proxy_no_cache $http_authorization $cookie_session;
            
            add_header X-Cache-Status $upstream_cache_status;
            
            error_page 502 503 504 = @fallback;
        }
        
        # Metrics endpoint (internal access only)
        location /metrics {
            modsecurity off;  # Trusted internal endpoint
            
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 3s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Fallback for service unavailability
        location @fallback {
            internal;
            modsecurity off;
            add_header Content-Type text/html;
            return 503 '<!DOCTYPE html>
<html>
<head>
    <title>Service Temporarily Unavailable</title>
    <meta http-equiv="refresh" content="10">
</head>
<body>
    <h1>Service Temporarily Unavailable</h1>
    <p>The service is being updated. Please wait a moment and try again.</p>
    <p>This page will automatically refresh in 10 seconds.</p>
</body>
</html>';
        }
        
        # Static files with caching
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            # Less strict WAF rules for static content
            modsecurity_rules '
                SecRuleRemoveById 941000-942999
            ';
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            gzip_static on;
            gzip_vary on;
            
            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }
    }
}