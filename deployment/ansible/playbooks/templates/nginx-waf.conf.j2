
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

# Load ModSecurity module
load_module modules/ngx_http_modsecurity_module.so;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ModSecurity configuration
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity/main.conf;

    # Dynamic upstream resolution
    resolver 127.0.0.11 valid=30s ipv6=off;

    # Real IP configuration - Trust Load Balancer
    set_real_ip_from 10.0.4.10;       # Load Balancer internal IP
    set_real_ip_from 10.0.0.0/8;      # Hetzner private network
    set_real_ip_from 172.16.0.0/12;   # Docker networks
    
    # Load balancer passes original client IP via these headers
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=burst_limit:10m rate=50r/m;
    limit_req_zone $binary_remote_addr zone=health_limit:10m rate=100r/m;
    limit_req_status 429;

    # Cache configuration
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;

    # Enhanced logging with WAF and SSL termination info
    log_format backend_combined '$remote_addr - $remote_user [$time_local] '
                               '"$request" $status $body_bytes_sent '
                               '"$http_referer" "$http_user_agent" '
                               'forwarded_for: $http_x_forwarded_for '
                               'forwarded_proto: $http_x_forwarded_proto '
                               'ssl_terminated_at: "load_balancer" '
                               'modsec_anomaly_score: $upstream_http_x_modsecurity_anomaly_score';
    
    access_log /var/log/nginx/access.log backend_combined;

    # WebSocket upgrade handling
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # HTTP server - receives traffic from Load Balancer (already SSL terminated)
    server {
        listen 80;
        listen [::]:80;
        
        # Accept traffic from any hostname since LB handles SSL/SNI
        server_name _;

        # Health check endpoint (high priority, no WAF)
        location = /health {
            modsecurity off;
            access_log off;
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend/gateway/health;
            
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
            
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            limit_req zone=health_limit burst=10 nodelay;
            
            # Return simple OK for LB health checks
            return 200 "Backend OK\n";
            add_header Content-Type text/plain;
        }
        
        # Load balancer health check
        location = /lb-health {
            modsecurity off;
            access_log off;
            return 200 "Backend WAF OK\n";
            add_header Content-Type text/plain;
        }

        # WAF health check
        location = /waf-health {
            modsecurity off;
            access_log off;
            return 200 "WAF Status: Active\nParanoia Level: {{ waf_paranoia_level | default(2) }}\nSSL: Terminated at Load Balancer\n";
            add_header Content-Type text/plain;
            add_header X-WAF-Version "ModSecurity 3 with OWASP CRS";
            add_header X-SSL-Termination "Load Balancer";
        }

        # WAF test endpoint
        location = /waf-test {
            return 200 "WAF Test: Request allowed\nSSL: Terminated at Load Balancer\nBackend: HTTP Only\n";
            add_header Content-Type text/plain;
            add_header X-WAF-Test "This endpoint is protected by ModSecurity";
            add_header X-SSL-Info "HTTPS terminated at Load Balancer";
        }
        
        # Main application with full WAF protection
        location / {
            # ModSecurity enabled for all application traffic
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            
            # Pass original request information from Load Balancer
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-SSL-Terminated-At "load-balancer";
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # Pass ModSecurity information to backend
            proxy_set_header X-ModSecurity-Anomaly-Score $upstream_http_x_modsecurity_anomaly_score;
            proxy_set_header X-ModSecurity-Rules-Matched $upstream_http_x_modsecurity_rules_matched;
            
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;
            
            # Proxy settings optimized for backend communication
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;
            
            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Error handling
            error_page 502 503 504 = @fallback;
        }
        
        # Gateway API with enhanced security
        location /gateway/ {
            # Stricter WAF rules for API endpoints
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-SSL-Terminated-At "load-balancer";
            
            # Stricter rate limiting for API
            limit_req zone=api_limit burst=10 nodelay;
            limit_req zone=burst_limit burst=5 nodelay;
            
            # API caching
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_bypass $http_authorization $cookie_session $arg_no_cache;
            proxy_no_cache $http_authorization $cookie_session;
            
            add_header X-Cache-Status $upstream_cache_status;
            add_header X-SSL-Info "HTTPS terminated at Load Balancer";
            
            error_page 502 503 504 = @fallback;
        }
        
        # Metrics endpoint (internal access only)
        location /metrics {
            modsecurity off;
            
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            deny all;
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        }
        
        # Fallback for service unavailability
        location @fallback {
            internal;
            modsecurity off;
            add_header Content-Type text/html;
            return 503 '<!DOCTYPE html>
<html>
<head>
    <title>Service Temporarily Unavailable</title>
    <meta http-equiv="refresh" content="10">
</head>
<body>
    <h1>Service Temporarily Unavailable</h1>
    <p>The service is being updated. Please wait a moment and try again.</p>
    <p>SSL is terminated at the Load Balancer level.</p>
    <p>This page will automatically refresh in 10 seconds.</p>
</body>
</html>';
        }
        
        # Static files with caching
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            # Less strict WAF rules for static content
            modsecurity_rules '
                SecRuleRemoveById 941000-942999
            ';
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            add_header X-SSL-Info "HTTPS terminated at Load Balancer";
            
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        }
        
        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }
    }
}