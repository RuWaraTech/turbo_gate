version: '3.8'

services:
  # NGINX with WAF - Backend mode (receives HTTP from LB)
  nginx-waf:
    image: owasp/modsecurity:3-nginx-alpine
    deploy:
      mode: global  # Runs on EVERY node for HA
      placement:
        constraints:
          - node.labels.waf_enabled == true
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
        failure_action: rollback
        monitor: 60s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host  # Backend HTTP only
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress  # Health check port
    configs:
      - source: nginx_backend_config
        target: /etc/nginx/nginx.conf
        mode: 0444
      - source: modsecurity_config
        target: /etc/nginx/modsecurity/modsecurity.conf
        mode: 0444
      - source: modsecurity_rules
        target: /etc/nginx/modsecurity/main.conf
        mode: 0444
    volumes:
      # No SSL certificates needed - LB handles SSL
      - /var/log/nginx/waf:/var/log/nginx
      - /var/cache/nginx:/var/cache/nginx
      # ModSecurity volumes
      - modsec_tmp:/var/modsecurity/tmp
      - modsec_data:/var/modsecurity/data
    networks:
      - turbogate_frontend
      - turbogate_backend
    environment:
      - PARANOIA={{ waf_paranoia_level | default(2) }}
      - ANOMALY_INBOUND={{ waf_anomaly_inbound | default(10) }}
      - ANOMALY_OUTBOUND={{ waf_anomaly_outbound | default(8) }}
      - BACKEND_SERVICE=turbogate_turbogate:5000
      - SSL_TERMINATION=load_balancer
      - DOMAIN_NAME={{ domain_name }}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/waf-health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s  # Faster startup since no SSL cert loading
    tmpfs:
      - /tmp:uid=101,gid=101,mode=755
      - /run:uid=101,gid=101,mode=755
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
      - DAC_OVERRIDE

  turbogate:
    image: {{ docker_registry | default('docker.io') }}/{{ image_name | default('fwande/turbogate') }}:{{ image_tag | default('latest') }}
    deploy:
      replicas: {{ app_replicas | default(3) }}
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.1
      rollback_config:
        parallelism: 1
        delay: 10s
        order: stop-first
        monitor: 30s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.labels.security_zone == internal
        preferences:
          - spread: node.id
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - FLASK_ENV=prod
      - LOG_LEVEL=INFO
      - DOMAIN_NAME={{ domain_name }}
      - VERSION={{ version | default('unknown') }}
      - TRUSTED_PROXIES=10.0.0.0/16,172.16.0.0/12
      - REAL_IP_HEADER=X-Forwarded-For
      - FORWARDED_FOR_HEADER=X-Forwarded-For
      - SSL_TERMINATED_AT=load_balancer  # App knows SSL is handled upstream
      - SECURE_COOKIES=true  # Enable secure cookies even though backend is HTTP
    secrets:
      - source: turbogate_secret_key
        target: SECRET_KEY
        mode: 0444
      - source: redis_password
        target: redis_password
        mode: 0444
    networks:
      - turbogate_backend
      - turbogate_database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/gateway/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s
    depends_on:
      - redis
    user: "1001:1001"
    tmpfs:
      - /tmp:uid=1001,gid=1001,mode=1777
      - /var/tmp:uid=1001,gid=1001,mode=1777
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      placement:
        constraints: 
          - node.labels.role == manager
        preferences:
          - spread: node.labels.security_zone
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    entrypoint: ["/bin/sh", "-c"]
    command: ["redis-server --requirepass \"$$(cat /run/secrets/redis_password)\" --maxmemory 200mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10"]
    secrets:
      - source: redis_password
        target: redis_password
        mode: 0444
    networks:
      - turbogate_database
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli --no-auth-warning -a \"$$(cat /run/secrets/redis_password)\" ping | grep -q PONG"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s
    user: "999:999"
    read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/turbogate/redis
  modsec_tmp:
    driver: local
  modsec_data:
    driver: local

networks:
  turbogate_frontend:
    external: true
    name: turbogate_frontend
  turbogate_backend:
    external: true  
    name: turbogate_backend
  turbogate_database:
    external: true
    name: turbogate_database

configs:
  nginx_backend_config:  # Changed from nginx_waf_config
    external: true
  modsecurity_config:
    external: true
  modsecurity_rules:
    external: true

secrets:
  turbogate_secret_key:
    external: true
  redis_password:
    external: true