user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Prevent Nginx version advertisement
    server_tokens off;

    # Dynamic upstream resolution - no static upstream blocks
    resolver 127.0.0.11 valid=30s ipv6=off;

    # Enhanced rate limiting with burst handling
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=burst_limit:10m rate=50r/m;
    limit_req_zone $binary_remote_addr zone=health_limit:10m rate=100r/m;
    limit_req_status 429;

    # Connection limiting to prevent DoS
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # Improved cache configuration
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m use_temp_path=off;

    # Log format for better debugging
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'upstream: $upstream_addr '
                       'resp_time: $request_time '
                       'upstream_time: $upstream_response_time';

    # WebSocket upgrade handling
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 80;
        listen [::]:80;
        server_name {{ domain_name }} www.{{ domain_name }};

        # Allow Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
            try_files $uri =404;
        }
        
        # Health check endpoint for load balancers (HTTP)
        location = /lb-health {
            access_log off;
            return 200 "NGINX OK\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        server_name {{ domain_name }} www.{{ domain_name }};

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}/privkey.pem;
        
        # Enhanced SSL security settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 24h;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/letsencrypt/live/{{ domain_name }}/chain.pem;
        
        # DNS resolver for OCSP stapling
        resolver 127.0.0.11 valid=300s;
        resolver_timeout 5s;
        
        # Enhanced security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        # NOTE: Stricter CSP applied. 'unsafe-inline' and 'unsafe-eval' removed.
        # This may require application changes (e.g., removing inline scripts/styles) to function correctly.
        add_header Content-Security-Policy "default-src 'self' https:; script-src 'self'; style-src 'self'; object-src 'none'; frame-ancestors 'self';" always;
        add_header X-Deployment-Version "{{ version | default('unknown') }}" always;

        # Improved logging with detailed format
        access_log /var/log/nginx/turbogate_access.log detailed buffer=32k flush=5s;
        error_log /var/log/nginx/turbogate_error.log warn;
        
        # Enhanced client settings
        client_max_body_size 10M;
        client_body_buffer_size 128k;
        client_body_timeout 12;
        client_header_timeout 12;
        
        # Optimized proxy settings
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 16 8k;
        proxy_busy_buffers_size 16k;
        proxy_temp_file_write_size 64k;
        
        # Connection reuse
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Health check endpoint (high priority, no rate limiting)
        location = /health {
            access_log off;
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend/gateway/health;
            
            # Fast health check settings
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Allow for load balancer health checks
            limit_req zone=health_limit burst=10 nodelay;
        }
        
        # Load balancer health check
        location = /lb-health {
            access_log off;
            return 200 "NGINX OK\n";
            add_header Content-Type text/plain;
        }
        
        # Root location - main application with dynamic resolution
        location / {
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            
            # Standard headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # Rate limiting with burst capability
            limit_req zone=api_limit burst=20 nodelay;
            limit_conn conn_limit 10;
            
            # Custom error handling
            error_page 502 503 504 = @fallback;
            
            # Disable buffering for real-time features
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;
        }
        
        # Fallback handler for service unavailability
        location @fallback {
            internal;
            add_header Content-Type text/html;
            return 503 '<!DOCTYPE html>
    <html>
    <head>
        <title>Service Temporarily Unavailable</title>
        <meta http-equiv="refresh" content="10">
    </head>
    <body>
        <h1>Service Temporarily Unavailable</h1>
        <p>The service is being updated. Please wait a moment and try again.</p>
        <p>This page will automatically refresh in 10 seconds.</p>
    </body>
    </html>';
        }
        
        # Gateway API endpoints with enhanced caching and dynamic resolution
        location /gateway/ {
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # API-specific rate limiting
            limit_req zone=api_limit burst=30 nodelay;
            limit_req zone=burst_limit burst=5 nodelay;
            
            # Smart caching for API endpoints
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_bypass $http_authorization $cookie_session $arg_no_cache;
            proxy_no_cache $http_authorization $cookie_session;
            
            # Cache status headers
            add_header X-Cache-Status $upstream_cache_status;
            add_header X-Cache-Key "$scheme$request_method$host$request_uri$is_args$args";
            
            # Error fallback
            error_page 502 503 504 = @fallback;
        }
        
        # Metrics endpoint (secured for internal access)
        location /metrics {
            # Allow internal networks
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Fast response for metrics
            proxy_connect_timeout 3s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Static files with aggressive caching and compression
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            set $backend "turbogate_turbogate:5000";
            proxy_pass http://$backend;
            
            # Long-term caching for static assets
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # Compression settings
            gzip_static on;
            gzip_vary on;
            
            # Fast timeouts for static files
            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # Custom error pages
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        # Security: Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }
        
        # Security: Deny access to backup files
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }
    }
}