---
- name: Setup Docker Swarm Cluster
  hosts: swarm_managers:swarm_workers
  become: yes
  gather_facts: yes
  vars:
    swarm_advertise_addr: "{{ ansible_default_ipv4.address }}"
    swarm_listen_addr: "{{ ansible_default_ipv4.address }}:2377"
    join_retries: 3
    join_retry_delay: 10

  tasks:
    - name: Update package cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      ansible.builtin.package:
        name: [curl, python3-pip, netcat-traditional]
        state: present

    - name: Check if Docker is already installed
      ansible.builtin.command: docker --version
      register: docker_installed
      failed_when: false
      changed_when: false

    - name: Download the official Docker installation script
      ansible.builtin.get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'
        timeout: 30
      when: docker_installed.rc != 0

    - name: Install Docker if it is not present
      ansible.builtin.command: /tmp/get-docker.sh
      args:
        creates: /usr/bin/docker
      when: docker_installed.rc != 0

    - name: Ensure Docker service is running and enabled
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Install Python Docker SDK
      ansible.builtin.pip:
        name: [jsondiff, "docker>=6.0.0"]
        state: present

    # NEW: Clean up any existing swarm state on worker nodes
    - name: Check current swarm status of the node
      ansible.builtin.command: "docker info --format '{{.Swarm.LocalNodeState}}'"
      register: swarm_state
      changed_when: false

    - name: Leave swarm if node is in error state (worker nodes only)
      ansible.builtin.command: docker swarm leave --force
      when:
        - "'swarm_workers' in group_names"
        - swarm_state.stdout in ["error", "locked"]
      ignore_errors: yes

    - name: Re-check swarm status after cleanup
      ansible.builtin.command: "docker info --format '{{.Swarm.LocalNodeState}}'"
      register: swarm_state_clean
      changed_when: false
      when: "'swarm_workers' in group_names"

    - name: Initialize swarm on the primary manager
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ swarm_advertise_addr }}"
        listen_addr: "{{ swarm_listen_addr }}"
      when:
        - "'swarm_managers' in group_names"
        - inventory_hostname == groups['swarm_managers'][0]
        - swarm_state.stdout == "inactive"

    - name: Get worker join token from the manager
      community.docker.docker_swarm_info:
      register: swarm_info
      delegate_to: "{{ groups['swarm_managers'][0] }}"
      run_once: true

    - name: Set worker token fact for other nodes to use
      ansible.builtin.set_fact:
        docker_worker_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
      when: swarm_info.swarm_facts is defined

    # IMPROVED: Better join logic with retries
    - name: Join worker nodes to the swarm
      community.docker.docker_swarm:
        state: join
        advertise_addr: "{{ swarm_advertise_addr }}"
        join_token: "{{ hostvars[groups['swarm_managers'][0]]['docker_worker_token'] }}"
        remote_addrs: ["{{ hostvars[groups['swarm_managers'][0]]['ansible_default_ipv4']['address'] }}:2377"]
      when:
        - "'swarm_workers' in group_names"
        - (swarm_state_clean.stdout | default(swarm_state.stdout)) == "inactive"
        - hostvars[groups['swarm_managers'][0]]['docker_worker_token'] is defined
      retries: 3
      delay: 10

    # FIXED: More robust node readiness check
    - name: Wait for all nodes to appear in the swarm
      ansible.builtin.shell: "docker node ls --format '{{.Hostname}}' | wc -l"
      register: node_count
      until: node_count.stdout | int >= ((groups['swarm_managers'] | length) + (groups['swarm_workers'] | length))
      retries: 20
      delay: 5
      run_once: true
      delegate_to: "{{ groups['swarm_managers'][0] }}"
      changed_when: false

    - name: Wait for nodes to become ready (with tolerance for temporary unavailable state)
      ansible.builtin.shell: |
        ready_nodes=$(docker node ls --filter role=worker --format '{{.Status}}' | grep -c "Ready" || echo "0")
        total_workers={{ groups['swarm_workers'] | length }}
        if [ "$ready_nodes" -ge $(($total_workers * 2 / 3)) ]; then
          exit 0
        else
          exit 1
        fi
      register: nodes_ready
      until: nodes_ready.rc == 0
      retries: 15
      delay: 10
      run_once: true
      delegate_to: "{{ groups['swarm_managers'][0] }}"
      changed_when: false

    - name: Create shared external overlay networks
      community.docker.docker_network:
        name: "{{ item }}"
        driver: overlay
        attachable: yes
      loop:
        - turbogate_backend
        - turbogate_database
      run_once: true
      delegate_to: "{{ groups['swarm_managers'][0] }}"

    - name: Label all nodes with their role and security context
      community.docker.docker_node:
        hostname: "{{ ansible_hostname }}"
        labels:
          security_hardened: "true"
          security_zone: "{{ 'dmz' if 'swarm_managers' in group_names else 'internal' }}"
      delegate_to: "{{ groups['swarm_managers'][0] }}"

    - name: Display final cluster status and labels
      ansible.builtin.command: "docker node ls"
      register: final_node_ls
      run_once: true
      delegate_to: "{{ groups['swarm_managers'][0] }}"
      changed_when: false

    - name: Print cluster status
      ansible.builtin.debug:
        var: final_node_ls.stdout_lines
      run_once: true

    - name: Final success message
      ansible.builtin.debug:
        msg: "âœ… Docker Swarm cluster setup and node labeling completed successfully!"
      run_once: true