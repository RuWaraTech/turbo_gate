---
- name: Setup Docker Swarm Cluster on Hetzner Cloud
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    # The floating IP is passed as extra var
    # swarm_advertise_addr: "{{ floating_ip | default(ansible_default_ipv4.address) }}"
      swarm_advertise_addr: "{{ internal_ip }}:2377"
  tasks:
    - name: Install Docker using official script
      shell: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        rm get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Install Docker Python SDK
      pip:
        name:
          - docker
          - docker-compose
          - jsondiff
        state: present

    - name: Add ansible user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user is defined and ansible_user != 'root'

    # Manager-specific tasks
    - name: Initialize Docker Swarm on manager
      docker_swarm:
        state: present
        advertise_addr: "{{ internal_ip }}"
        listen_addr: "{{ internal_ip }}:2377"
      when: "'manager' in group_names"
      register: swarm_manager_info

    - name: Store join tokens
      set_fact:
        docker_worker_token: "{{ swarm_manager_info.swarm_facts.JoinTokens.Worker }}"
        docker_manager_token: "{{ swarm_manager_info.swarm_facts.JoinTokens.Manager }}"
      when: 
        - "'manager' in group_names"
        - swarm_manager_info.swarm_facts is defined

    # Worker-specific tasks
    - name: Wait for manager to be ready
      wait_for:
        host: "{{ hostvars[groups['manager'][0]]['internal_ip'] }}"
        port: 2377
        delay: 5
        timeout: 60
      when: "'workers' in group_names"

    - name: Join workers to swarm
      docker_swarm:
        state: join
        advertise_addr: "{{ internal_ip }}"
        join_token: "{{ hostvars[groups['manager'][0]]['docker_worker_token'] }}"
        remote_addrs:
          - "{{ hostvars[groups['manager'][0]]['internal_ip'] }}:2377"
      when: 
        - "'workers' in group_names"
        - hostvars[groups['manager'][0]]['docker_worker_token'] is defined
      retries: 3
      delay: 60

    - name: Verify Docker Swarm status (minimal check)
      block:
        - name: Check if swarm is active
          command: docker info | grep -E "Swarm|Node Address"
          register: swarm_check
          changed_when: false
          ignore_errors: yes
          when: "'manager' in group_names"

        - name: List swarm nodes
          command: docker node ls
          register: node_list
          changed_when: false
          when: "'manager' in group_names"

        - name: Show swarm status
          debug:
            msg:
              - "Swarm Status: {{ swarm_check.stdout_lines | select('match', 'Swarm') | first | default('Swarm: inactive') }}"
              - "Node Address: {{ swarm_check.stdout_lines | select('match', 'Node Address') | first | default('N/A') }}"
              - "Node List:"
              - "{{ node_list.stdout }}"
          when: "'manager' in group_names"
          
    # Only on manager: set up initial swarm services
    - name: Create overlay network for applications
      docker_network:
        name: turbogate_network
        driver: overlay
        driver_options:
          encrypted: "true"
      when: "'manager' in group_names"

    - name: Display connection information
      debug:
        msg:
          - "Swarm initialized successfully!"
          - "Manager internal IP: {{ hostvars[groups['manager'][0]]['internal_ip'] }}"
          - "Manager public IP: {{ hostvars[groups['manager'][0]]['ansible_default_ipv4']['address'] }}"
          - "Floating IP: {{ floating_ip }}"
          - "Worker token: {{ docker_worker_token | default('N/A') }}"
      when: "'manager' in group_names"
      run_once: true