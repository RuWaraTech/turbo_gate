- name: Setup Docker Swarm Cluster
  hosts: all
  become: yes

  tasks:
    # Troubleshooting section
    - name: Debug system information
      debug:
        msg: |
          Distribution: {{ ansible_distribution }}
          Version: {{ ansible_distribution_version }}
          Release: {{ ansible_distribution_release }}
          Service Manager: {{ ansible_service_mgr }}
      tags: debug

    - name: Check network configuration method
      stat:
        path: "{{ item }}"
      register: network_configs
      loop:
        - /etc/network/interfaces
        - /etc/network/interfaces.d
        - /etc/NetworkManager
        - /etc/systemd/network
      tags: debug

    - name: Display network configuration status
      debug:
        msg: "{{ item.item }} exists: {{ item.stat.exists }}"
      loop: "{{ network_configs.results }}"
      tags: debug

    # Install netaddr for IP operations (needed for ipaddr filter)
    - name: Install Python netaddr library
      pip:
        name: netaddr
        state: present

    # Configure floating IP for systemd-networkd
    - name: Configure floating IP with systemd-networkd
      copy:
        content: |
          [Match]
          Name=eth0
          
          [Network]
          Address={{ floating_ip }}/32
          {% if ansible_all_ipv6_addresses | length > 0 %}
          Address={{ ansible_all_ipv6_addresses[0].split('/')[0] }}/64
          {% endif %}
        dest: /etc/systemd/network/60-floating-ip.network
        mode: '0644'
      notify: restart systemd-networkd
      when: 
        - floating_ip is defined
        - network_configs.results[3].stat.exists  # systemd-networkd exists

    # Configure floating IP for ifupdown (fallback)
    - name: Ensure network interfaces.d directory exists (ifupdown)
      file:
        path: /etc/network/interfaces.d
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: network_configs.results[0].stat.exists  # Only if /etc/network/interfaces exists

    - name: Configure floating IP interface (ifupdown)
      copy:
        content: |
          auto eth0:1
          iface eth0:1 inet static
              address {{ floating_ip }}
              netmask 32
          {% if ansible_all_ipv6_addresses | length > 0 %}
          auto eth0:1
          iface eth0:1 inet6 static
              address {{ ansible_all_ipv6_addresses[0].split('/')[0] }}
              netmask 64
          {% endif %}
        dest: /etc/network/interfaces.d/60-my-floating-ip.cfg
        mode: '0644'
      notify: restart networking
      when: 
        - floating_ip is defined
        - network_configs.results[0].stat.exists  # ifupdown exists

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
        state: present
        update_cache: yes
    
    # Create directory for Docker GPG key (newer method)
    - name: Create directory for Docker GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
    
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
    
    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes
    
    - name: Install Docker Python library
      pip:
        name:
          - docker
          - docker-compose
        state: present
    
    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes
    
    - name: Initialize Swarm on manager
      docker_swarm:
        state: present
        advertise_addr: "{{ floating_ip }}"
      when: swarm_role == "manager"
      register: swarm_info
    
    - name: Get join token for workers
      set_fact:
        worker_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
      when: 
        - swarm_role == "manager"
        - swarm_info.swarm_facts is defined
    
    - name: Join workers to swarm
      docker_swarm:
        state: join
        join_token: "{{ hostvars[groups['swarm_managers'][0]]['worker_token'] }}"
        remote_addrs: ["{{ hostvars[groups['swarm_managers'][0]]['floating_ip'] }}:2377"]
      when: 
        - swarm_role == "worker"
        - groups['swarm_managers'] is defined
        - groups['swarm_managers'] | length > 0
        - hostvars[groups['swarm_managers'][0]]['worker_token'] is defined

  handlers:
    - name: restart networking
      service:
        name: networking
        state: restarted
        
    - name: restart systemd-networkd
      systemd:
        name: systemd-networkd
        state: restarted