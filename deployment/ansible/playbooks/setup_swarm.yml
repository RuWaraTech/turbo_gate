---
- name: Setup Docker Swarm Cluster on Hetzner Cloud
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    swarm_advertise_addr: "{{ internal_ip }}"
    swarm_listen_addr: "{{ internal_ip }}:2377"
    join_retries: 3
    join_retry_delay: 10

  tasks:
    - name: Install Docker using official script
      ansible.builtin.get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'

    - name: Install Docker if not present
      ansible.builtin.command: /tmp/get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: Remove Docker installation script
      ansible.builtin.file:
        path: /tmp/get-docker.sh
        state: absent

    - name: Ensure Docker service is running
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install Python Docker module
      ansible.builtin.pip:
        name: docker

    - name: Check swarm status via docker CLI
      ansible.builtin.command: docker info --format '{{.Swarm.LocalNodeState}}'
      register: swarm_state
      failed_when: false
      changed_when: false

    - name: Initialize swarm on manager
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ swarm_advertise_addr }}"
        listen_addr: "{{ swarm_listen_addr }}"
        default_addr_pool:
          - base: 10.10.0.0/16
            size: 24
        subnet_size: 24
      when:
        - "'swarm_managers' in group_names"
        - swarm_state.stdout != "active"
      register: swarm_init

    - name: Get worker join token from manager
      ansible.builtin.command: docker swarm join-token -q worker
      register: worker_token
      changed_when: false
      when: "'swarm_managers' in group_names"

    - name: Set worker token fact
      ansible.builtin.set_fact:
        docker_worker_token: "{{ worker_token.stdout }}"
      when: "'swarm_managers' in group_names"

    - name: Wait for manager swarm port
      ansible.builtin.wait_for:
        host: "{{ hostvars[groups['swarm_managers'][0]]['internal_ip'] }}"
        port: 2377
        state: started
        delay: 3
        timeout: 60
      when: "'workers' in group_names"
      delegate_to: localhost

    - name: Join workers to swarm
      community.docker.docker_swarm:
        state: join
        advertise_addr: "{{ swarm_advertise_addr }}"
        join_token: "{{ hostvars[groups['swarm_managers'][0]]['docker_worker_token'] }}"
        remote_addrs:
          - "{{ hostvars[groups['swarm_managers'][0]]['internal_ip'] }}:2377"
      retries: 3
      delay: 10
      until: swarm_state.stdout == "active"
      when:
        - "'workers' in group_names"
        - swarm_state.stdout != "active"

    - name: Create overlay network (manager only)
      community.docker.docker_network:
        name: turbogate_network
        driver: overlay
        attachable: yes
        driver_options:
          encrypted: "true"
        ipam_options:
          driver: default
          config:
            - subnet: "10.10.0.0/24"
              gateway: "10.10.0.1"
      when: "'swarm_managers' in group_names"

    - name: Label manager node
      community.docker.docker_node:
        hostname: "{{ ansible_hostname }}"
        labels:
          role: "manager"
          app: "turbogate"
      when: "'swarm_managers' in group_names"

    - name: Label worker nodes
      community.docker.docker_node:
        hostname: "{{ ansible_hostname }}"
        labels:
          role: "worker"
          app: "turbogate"
      when: "'workers' in group_names"