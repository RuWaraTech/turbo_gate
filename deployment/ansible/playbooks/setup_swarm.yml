- name: Setup Docker Swarm Cluster on Hetzner Cloud
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    swarm_advertise_addr: "{{ internal_ip }}"
    swarm_listen_addr: "{{ internal_ip }}:2377"
    join_retries: 3
    join_retry_delay: 10  # Increased from 5 to 10 seconds for better stability

  tasks:
    - name: Install Docker using official script
      ansible.builtin.get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'
      changed_when: false

    - name: Execute Docker installation
      ansible.builtin.command: /tmp/get-docker.sh
      args:
        removes: /tmp/get-docker.sh

    - name: Ensure Docker service is running
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Install required Python packages
      ansible.builtin.pip:
        name:
          - docker
          - docker-compose
          - jsondiff
        state: present

    - name: Configure non-root Docker access
      ansible.builtin.user:
        name: "{{ ansible_user | default('ubuntu') }}"
        groups: docker
        append: yes

    - name: Initialize Docker Swarm on manager
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ swarm_advertise_addr }}"
        listen_addr: "{{ swarm_listen_addr }}"
        force: yes
      when: "'manager' in group_names"
      register: swarm_init
      retries: 3
      delay: 5

    - name: Store swarm tokens securely
      ansible.builtin.set_fact:
        docker_worker_token: "{{ swarm_init.swarm_facts.JoinTokens.Worker }}"
        docker_manager_token: "{{ swarm_init.swarm_facts.JoinTokens.Manager }}"
      when: 
        - "'manager' in group_names"
        - swarm_init.swarm_facts is defined
      no_log: true  # Prevents token exposure in logs

    - name: Verify manager readiness
      ansible.builtin.wait_for:
        host: "{{ swarm_advertise_addr }}"
        port: 2377
        state: started
        delay: 5
        timeout: 120  # Increased timeout for cloud environments
      when: "'workers' in group_names"

    - name: Join workers to swarm
      community.docker.docker_swarm:
        state: join
        advertise_addr: "{{ swarm_advertise_addr }}"
        join_token: "{{ hostvars[groups['manager'][0]['docker_worker_token'] }}"
        remote_addrs:
          - "{{ hostvars[groups['manager'][0]['internal_ip'] }}:2377"
      when: 
        - "'workers' in group_names"
        - hostvars[groups['manager'][0]]['docker_worker_token'] is defined
      retries: "{{ join_retries }}"
      delay: "{{ join_retry_delay }}"
      register: join_result
      until: join_result is succeeded

    - name: Validate swarm status
      block:
        - name: Get swarm facts
          community.docker.docker_swarm_info:
          register: swarm_facts
          when: "'manager' in group_names"

        - name: Verify swarm health
          ansible.builtin.assert:
            that:
              - swarm_facts.swarm.LocalNodeState == "active"
              - "'Leader' in swarm_facts.swarm.ManagerStatus|default('')"
            fail_msg: "Swarm is not in healthy state"
            success_msg: "Swarm is active and healthy"
          when: "'manager' in group_names"
      when: "'manager' in group_names"

    - name: Create overlay network
      community.docker.docker_network:
        name: turbogate_network
        driver: overlay
        attachable: yes
        driver_options:
          encrypted: "true"
      when: "'manager' in group_names"

    - name: Display swarm connection info
      ansible.builtin.debug:
        msg: |
          SWARM DEPLOYMENT SUCCESSFUL
          ===========================
          Manager Node: {{ groups['manager'][0] }}
          Internal IP: {{ hostvars[groups['manager'][0]]['internal_ip'] }}
          Swarm Token: (secured - check manager node)
          Overlay Network: turbogate_network
          Node Count: {{ groups['workers']|length + 1 }}  
      when: "'manager' in group_names"
      run_once: true