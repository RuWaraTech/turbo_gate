---
- name: Setup Docker Swarm Cluster
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    docker_gpg_key_url: https://download.docker.com/linux/ubuntu/gpg
    docker_gpg_key_path: /etc/apt/keyrings/docker.asc
    docker_repo: "deb [arch=amd64 signed-by={{ docker_gpg_key_path }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable"

  tasks:

    - name: Install pre-requisite packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
        state: present
        update_cache: yes

    - name: Clean up all existing Docker configurations
      shell: |
        rm -f /etc/apt/sources.list.d/docker.list*
        rm -f /etc/apt/keyrings/docker.*
        rm -f /usr/share/keyrings/docker*
        apt-key del 9DC858229FC7DD38854AE2D88D81803C0EBFCD88 2>/dev/null || true
        apt-key del 7EA0A9C3F273FCD8 2>/dev/null || true
      ignore_errors: yes

    - name: Update apt cache after cleanup
      apt:
        update_cache: yes
      ignore_errors: yes

    - name: Install Docker using official script (more reliable)
      shell: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        rm get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: Ensure Docker service is enabled
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Install Docker Python libraries
      pip:
        name:
          - docker
          - docker-compose
          - jsondiff
        state: present

    - name: Add user to docker group (optional)
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user is defined and ansible_user != 'root'

    - name: Check if node is already in a swarm
      docker_swarm_info:
      register: swarm_status
      ignore_errors: yes

    - name: Initialize Swarm on manager
      docker_swarm:
        state: present
        advertise_addr: "{{ ansible_default_ipv4.address }}"
      when: swarm_role == "manager"
      register: swarm_info

    - name: Get join token for workers
      set_fact:
        worker_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
      when: swarm_role == "manager"

    - name: Join workers to swarm
      docker_swarm:
        state: join
        join_token: "{{ hostvars[groups['swarm_managers'][0]]['worker_token'] }}"
        remote_addrs: ["{{ hostvars[groups['swarm_managers'][0]]['ansible_default_ipv4']['address'] }}:2377"]
      when:
        - swarm_role == "worker"
        - groups['swarm_workers'] | length > 0