- name: Setup Docker Swarm Cluster
  hosts: all
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    # Ensure Python and pip are properly installed
    - name: Install Python and pip requirements
      apt:
        name:
          - python3
          - python3-pip
          - python3-netaddr  # Install system package version if available
        state: present
        update_cache: yes
      when: ansible_os_family == 'Debian'
      register: python_install
      ignore_errors: yes  # Continue if system package not available

    - name: Debug Python installation
      debug:
        var: python_install

    # Install netaddr via pip if system package not available
    - name: Install netaddr via pip
      pip:
        name: netaddr
        state: present
        executable: pip3
      when: python_install is failed or python_install.changed
      register: pip_install

    - name: Debug pip installation
      debug:
        var: pip_install

    # Verify netaddr is importable
    - name: Test netaddr import
      command: "python3 -c 'import netaddr; print(netaddr.__version__)'"
      register: netaddr_test
      changed_when: false

    - name: Show netaddr test results
      debug:
        var: netaddr_test

    # Floating IP configuration
    - name: Configure floating IP interface using Netplan
      copy:
        content: |
          network:
            version: 2
            ethernets:
              eth0:
                addresses:
                  - {{ floating_ip }}/32
                  {% if ansible_all_ipv6_addresses is defined and ansible_all_ipv6_addresses | length > 0 %}
                  - "{{ ansible_all_ipv6_addresses[0] | ansible.utils.ipaddr('network') }}::2/64"
                  {% endif %}
        dest: /etc/netplan/60-my-floating-ip.yaml
        mode: '0644'
      notify: apply netplan configuration
      when: floating_ip is defined

    # Docker installation
    - name: Install Docker prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Create Docker GPG key directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker components
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Install Docker Python SDK
      pip:
        name:
          - docker
          - docker-compose
        executable: pip3

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes

    # Swarm configuration
    - name: Initialize Swarm on manager
      docker_swarm:
        state: present
        advertise_addr: "{{ floating_ip }}"
      when: swarm_role == "manager"
      register: swarm_info

    - name: Get worker join token
      set_fact:
        worker_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
      when:
        - swarm_role == "manager"
        - swarm_info.swarm_facts is defined

    - name: Join workers to swarm
      docker_swarm:
        state: join
        join_token: "{{ hostvars[groups['swarm_managers'][0]]['worker_token'] }}"
        remote_addrs: ["{{ hostvars[groups['swarm_managers'][0]]['floating_ip'] }}:2377"]
      when:
        - swarm_role == "worker"
        - groups['swarm_managers'] is defined
        - groups['swarm_managers'] | length > 0
        - hostvars[groups['swarm_managers'][0]]['worker_token'] is defined

  handlers:
    - name: apply netplan configuration
      command: netplan apply