---
- name: Install Docker on all nodes
  hosts: all
  become: yes
  tasks:
    - name: Download Docker install script
      ansible.builtin.get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'

    - name: Install Docker
      ansible.builtin.command: /tmp/get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: Remove Docker installation script
      ansible.builtin.file:
        path: /tmp/get-docker.sh
        state: absent

    - name: Enable and start Docker
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install Python Docker module
      ansible.builtin.pip:
        name: docker


- name: Initialize Swarm on manager
  hosts: swarm_managers
  become: yes
  tasks:
    - name: Check swarm status
      ansible.builtin.command: docker info --format '{{.Swarm.LocalNodeState}}'
      register: swarm_state
      changed_when: false
      failed_when: false

    - name: Init swarm if not active
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ internal_ip }}"
        listen_addr: "{{ internal_ip }}:2377"
      when: swarm_state.stdout != "active"

    - name: Get worker join token
      ansible.builtin.command: docker swarm join-token -q worker
      register: worker_token
      changed_when: false

    - name: Save worker token to hostvars
      ansible.builtin.set_fact:
        docker_worker_token: "{{ worker_token.stdout }}"


- name: Join workers to swarm
  hosts: workers
  become: yes
  tasks:
    - name: Wait until manager swarm port is open
      ansible.builtin.wait_for:
        host: "{{ hostvars[groups['swarm_managers'][0]]['internal_ip'] }}"
        port: 2377
        state: started
        delay: 3
        timeout: 120

    - name: Check swarm status
      ansible.builtin.command: docker info --format '{{.Swarm.LocalNodeState}}'
      register: swarm_state
      changed_when: false
      failed_when: false

    - name: Join the swarm with retries
      ansible.builtin.retry:
        until: swarm_state.stdout == "active"
        retries: 5
        delay: 5
      block:
        - name: Join swarm
          community.docker.docker_swarm:
            state: join
            advertise_addr: "{{ internal_ip }}"
            join_token: "{{ hostvars[groups['swarm_managers'][0]]['docker_worker_token'] }}"
            remote_addrs:
              - "{{ hostvars[groups['swarm_managers'][0]]['internal_ip'] }}:2377"
          when: swarm_state.stdout != "active"
